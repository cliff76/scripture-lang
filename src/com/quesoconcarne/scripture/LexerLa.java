/* The following code was generated by JFlex 1.4.3 on 9/15/09 6:05 AM */

package com.quesoconcarne.scripture;

/**
 * This is the lexer class for Latin.
 */

final class LexerLa implements ScriptureLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int REGEXP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\37\1\60\1\34\1\0\1\60\1\57\16\37\4\0\1\60\1\54"+
    "\1\40\1\56\1\36\1\53\2\0\1\33\1\35\1\52\1\50\1\45"+
    "\1\51\1\31\1\53\1\26\11\30\1\42\1\43\1\55\1\44\1\55"+
    "\1\0\1\32\6\27\24\36\1\46\1\41\1\47\1\0\1\36\1\0"+
    "\1\2\1\24\1\13\1\20\1\7\1\1\1\22\1\23\1\14\2\36"+
    "\1\3\1\11\1\12\1\17\1\15\1\36\1\10\1\4\1\16\1\5"+
    "\1\6\1\36\1\21\2\36\4\0\41\37\2\0\4\36\4\0\1\36"+
    "\2\0\1\37\7\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u013f\36\31\0\162\36\4\0\14\36\16\0\5\36\11\0\1\36"+
    "\21\0\130\37\5\0\23\37\12\0\1\36\13\0\1\36\1\0\3\36"+
    "\1\0\1\36\1\0\24\36\1\0\54\36\1\0\46\36\1\0\5\36"+
    "\4\0\202\36\1\0\4\37\3\0\105\36\1\0\46\36\2\0\2\36"+
    "\6\0\20\36\41\0\46\36\2\0\1\36\7\0\47\36\11\0\21\37"+
    "\1\0\27\37\1\0\3\37\1\0\1\37\1\0\2\37\1\0\1\37"+
    "\13\0\33\36\5\0\3\36\15\0\4\37\14\0\6\37\13\0\32\36"+
    "\5\0\13\36\16\37\7\0\12\25\4\0\2\36\1\37\143\36\1\0"+
    "\1\36\10\37\1\0\6\37\2\36\2\37\1\0\4\37\2\36\12\25"+
    "\3\36\2\0\1\36\17\0\1\37\1\36\1\37\36\36\33\37\2\0"+
    "\3\36\60\0\46\36\13\37\1\36\u014f\0\3\37\66\36\2\0\1\37"+
    "\1\36\20\37\2\0\1\36\4\37\3\0\12\36\2\37\2\0\12\25"+
    "\21\0\3\37\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\1\36\3\0\4\36\2\0\1\37\1\36\7\37\2\0\2\37"+
    "\2\0\3\37\11\0\1\37\4\0\2\36\1\0\3\36\2\37\2\0"+
    "\12\25\4\36\15\0\3\37\1\0\6\36\4\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\2\36\1\0\2\36\2\0\1\37"+
    "\1\0\5\37\4\0\2\37\2\0\3\37\13\0\4\36\1\0\1\36"+
    "\7\0\12\25\2\37\3\36\14\0\3\37\1\0\11\36\1\0\3\36"+
    "\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\37"+
    "\1\36\10\37\1\0\3\37\1\0\3\37\2\0\1\36\17\0\2\36"+
    "\2\37\2\0\12\25\1\0\1\36\17\0\3\37\1\0\10\36\2\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0"+
    "\1\37\1\36\6\37\3\0\2\37\2\0\3\37\10\0\2\37\4\0"+
    "\2\36\1\0\3\36\4\0\12\25\1\0\1\36\20\0\1\37\1\36"+
    "\1\0\6\36\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36"+
    "\1\0\2\36\3\0\2\36\3\0\3\36\3\0\10\36\1\0\3\36"+
    "\4\0\5\37\3\0\3\37\1\0\4\37\11\0\1\37\17\0\11\25"+
    "\11\0\1\36\7\0\3\37\1\0\10\36\1\0\3\36\1\0\27\36"+
    "\1\0\12\36\1\0\5\36\4\0\7\37\1\0\3\37\1\0\4\37"+
    "\7\0\2\37\11\0\2\36\4\0\12\25\22\0\2\37\1\0\10\36"+
    "\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36\2\0\1\37"+
    "\1\36\7\37\1\0\3\37\1\0\4\37\7\0\2\37\7\0\1\36"+
    "\1\0\2\36\4\0\12\25\22\0\2\37\1\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\20\36\4\0\6\37\2\0\3\37\1\0\4\37"+
    "\11\0\1\37\10\0\2\36\4\0\12\25\22\0\2\37\1\0\22\36"+
    "\3\0\30\36\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\37"+
    "\4\0\6\37\1\0\1\37\1\0\10\37\22\0\2\37\15\0\60\36"+
    "\1\37\2\36\7\37\4\0\10\36\10\37\1\0\12\25\47\0\2\36"+
    "\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36\6\0\4\36"+
    "\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36\2\0\2\36"+
    "\1\0\4\36\1\37\2\36\6\37\1\0\2\37\1\36\2\0\5\36"+
    "\1\0\1\36\1\0\6\37\2\0\12\25\2\0\2\36\42\0\1\36"+
    "\27\0\2\37\6\0\12\25\13\0\1\37\1\0\1\37\1\0\1\37"+
    "\4\0\2\37\10\36\1\0\42\36\6\0\24\37\1\0\2\37\4\36"+
    "\4\0\10\37\1\0\44\37\11\0\1\37\71\0\42\36\1\0\5\36"+
    "\1\0\2\36\1\0\7\37\3\0\4\37\6\0\12\25\6\0\6\36"+
    "\4\37\106\0\46\36\12\0\51\36\7\0\132\36\5\0\104\36\5\0"+
    "\122\36\6\0\7\36\1\0\77\36\1\0\1\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\47\36\1\0\1\36\1\0"+
    "\4\36\2\0\37\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\7\36\1\0\7\36\1\0\27\36\1\0"+
    "\37\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0\47\36\1\0"+
    "\23\36\16\0\11\25\56\0\125\36\14\0\u026c\36\2\0\10\36\12\0"+
    "\32\36\5\0\113\36\3\0\3\36\17\0\15\36\1\0\4\36\3\37"+
    "\13\0\22\36\3\37\13\0\22\36\2\37\14\0\15\36\1\0\3\36"+
    "\1\0\2\37\14\0\64\36\40\37\3\0\1\36\3\0\2\36\1\37"+
    "\2\0\12\25\41\0\3\37\2\0\12\25\6\0\130\36\10\0\51\36"+
    "\1\37\126\0\35\36\3\0\14\37\4\0\14\37\12\0\12\25\36\36"+
    "\2\0\5\36\u038b\0\154\36\224\0\234\36\4\0\132\36\6\0\26\36"+
    "\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0\7\36"+
    "\1\0\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0\6\36"+
    "\4\0\15\36\5\0\3\36\1\0\7\36\17\0\4\37\32\0\5\37"+
    "\20\0\2\36\23\0\1\36\13\0\4\37\6\0\6\37\1\0\1\36"+
    "\15\0\1\36\40\0\22\36\36\0\15\37\4\0\1\37\3\0\6\37"+
    "\27\0\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36"+
    "\6\0\1\36\1\0\1\36\1\0\1\36\1\0\4\36\1\0\3\36"+
    "\1\0\7\36\3\0\3\36\5\0\5\36\26\0\44\36\u0e81\0\3\36"+
    "\31\0\11\36\6\37\1\0\5\36\2\0\5\36\4\0\126\36\2\0"+
    "\2\37\2\0\3\36\1\0\137\36\5\0\50\36\4\0\136\36\21\0"+
    "\30\36\70\0\20\36\u0200\0\u19b6\36\112\0\u51a6\36\132\0\u048d\36\u0773\0"+
    "\u2ba4\36\u215c\0\u012e\36\2\0\73\36\225\0\7\36\14\0\5\36\5\0"+
    "\1\36\1\37\12\36\1\0\15\36\1\0\5\36\1\0\1\36\1\0"+
    "\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36\2\0"+
    "\66\36\50\0\15\36\3\0\20\37\20\0\4\37\17\0\2\36\30\0"+
    "\3\36\31\0\1\36\6\0\5\36\1\0\207\36\2\0\1\37\4\0"+
    "\1\36\13\0\12\25\7\0\32\36\4\0\1\36\1\0\32\36\12\0"+
    "\132\36\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36\3\0"+
    "\2\36\3\0\2\36\22\0\3\37\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\20\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\23\1\1\1\24"+
    "\1\25\1\26\6\2\1\27\2\2\1\30\1\31\14\2"+
    "\3\0\1\23\1\0\1\6\1\0\1\6\1\24\2\2"+
    "\1\32\5\2\1\23\1\2\1\33\2\2\1\34\12\2"+
    "\1\35\1\3\2\0\1\6\1\0\1\6\3\2\1\36"+
    "\13\2\1\37\1\2\1\40\1\2\1\41\4\0\1\6"+
    "\1\2\1\42\2\2\1\43\1\44\12\2\1\0\1\45"+
    "\2\2\1\46\1\47\1\50\1\51\1\52\5\2\1\0"+
    "\6\2\1\53\1\0\2\2\1\54\3\2\1\55\1\2"+
    "\1\56\1\57\1\2\1\60\1\55\1\61\1\62\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\223\0\u0436"+
    "\0\223\0\u0467\0\223\0\223\0\223\0\223\0\u0498\0\223"+
    "\0\223\0\223\0\223\0\223\0\223\0\223\0\u0498\0\u0498"+
    "\0\u04c9\0\u04fa\0\223\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0126\0\u0126\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\223\0\u09f4"+
    "\0\223\0\u0a25\0\u0a56\0\223\0\u0a87\0\u0ab8\0\u0126\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0126\0\u0bde\0\u0126\0\u0c0f"+
    "\0\u0c40\0\u0126\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0961\0\u0992\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0126\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u0126\0\u11fe\0\u0126\0\u122f\0\u0126\0\u1260"+
    "\0\u1291\0\u0ebd\0\u12c2\0\u09f4\0\u12f3\0\u0126\0\u1324\0\u1355"+
    "\0\u0126\0\u0126\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u0126\0\u15a1\0\u15d2"+
    "\0\u0126\0\u0126\0\u0126\0\u0126\0\u0126\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u0126\0\u184f\0\u1880\0\u18b1\0\u0126\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u0126\0\u0126\0\u19d7\0\u0126\0\u1a08"+
    "\0\u0126\0\u0126\0\u1260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\26\1\7"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\7\1\4"+
    "\1\34\1\4\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\2\32"+
    "\34\52\1\4\3\52\1\53\1\54\15\52\1\4\1\52"+
    "\61\4\62\0\1\7\1\55\26\7\5\0\2\7\22\0"+
    "\2\7\1\56\1\7\1\57\2\7\1\60\1\61\17\7"+
    "\5\0\2\7\22\0\30\7\5\0\2\7\22\0\12\7"+
    "\1\62\1\63\14\7\5\0\2\7\22\0\6\7\1\64"+
    "\21\7\5\0\2\7\22\0\3\7\1\65\11\7\1\66"+
    "\2\7\1\67\7\7\5\0\2\7\22\0\6\7\1\70"+
    "\21\7\5\0\2\7\22\0\13\7\1\71\2\7\1\72"+
    "\11\7\5\0\2\7\22\0\1\7\1\73\5\7\1\74"+
    "\20\7\5\0\2\7\22\0\11\7\1\75\16\7\5\0"+
    "\2\7\22\0\7\7\1\76\20\7\5\0\2\7\22\0"+
    "\7\7\1\77\20\7\5\0\2\7\22\0\6\7\1\100"+
    "\21\7\5\0\2\7\22\0\1\7\1\101\26\7\5\0"+
    "\2\7\22\0\6\7\1\102\21\7\5\0\2\7\22\0"+
    "\16\7\1\103\11\7\5\0\2\7\46\0\2\25\1\0"+
    "\1\25\1\104\50\0\1\105\3\0\2\25\1\0\1\25"+
    "\1\104\37\0\1\106\104\0\1\32\22\0\2\32\44\0"+
    "\1\107\14\0\34\110\1\111\15\110\1\112\4\110\1\113"+
    "\1\110\34\52\1\0\3\52\2\0\15\52\1\0\1\52"+
    "\40\0\1\114\21\0\2\7\1\115\25\7\5\0\2\7"+
    "\22\0\13\7\1\116\14\7\5\0\2\7\22\0\15\7"+
    "\1\117\12\7\5\0\2\7\22\0\15\7\1\120\12\7"+
    "\5\0\2\7\22\0\6\7\1\121\21\7\5\0\2\7"+
    "\22\0\7\7\1\122\20\7\5\0\2\7\22\0\11\7"+
    "\1\123\16\7\5\0\2\7\22\0\7\7\1\124\20\7"+
    "\5\0\2\7\22\0\15\7\1\125\12\7\5\0\2\7"+
    "\22\0\3\7\1\126\7\7\1\127\5\7\1\130\6\7"+
    "\5\0\2\7\22\0\22\7\1\131\5\7\5\0\2\7"+
    "\22\0\11\7\1\132\16\7\5\0\2\7\22\0\15\7"+
    "\1\133\12\7\5\0\2\7\22\0\6\7\1\134\21\7"+
    "\5\0\2\7\22\0\15\7\1\135\12\7\5\0\2\7"+
    "\22\0\6\7\1\136\7\7\1\137\11\7\5\0\2\7"+
    "\22\0\17\7\1\140\10\7\5\0\2\7\22\0\12\7"+
    "\1\141\15\7\5\0\2\7\22\0\4\7\1\142\23\7"+
    "\5\0\2\7\22\0\11\7\1\143\16\7\5\0\2\7"+
    "\22\0\16\7\1\144\11\7\5\0\2\7\46\0\2\145"+
    "\1\0\1\145\31\0\2\146\4\0\1\146\3\0\1\146"+
    "\4\0\1\146\3\0\1\146\1\0\3\146\37\0\1\147"+
    "\51\0\34\110\1\111\22\110\1\113\1\110\34\150\1\151"+
    "\15\150\1\152\4\150\1\153\1\150\34\0\1\111\25\0"+
    "\3\7\1\154\24\7\5\0\2\7\22\0\1\7\1\155"+
    "\26\7\5\0\2\7\22\0\6\7\1\156\21\7\5\0"+
    "\2\7\22\0\11\7\1\157\16\7\5\0\2\7\22\0"+
    "\13\7\1\160\14\7\5\0\2\7\22\0\16\7\1\161"+
    "\11\7\5\0\2\7\22\0\4\7\1\162\23\7\5\0"+
    "\2\7\22\0\1\7\1\163\26\7\5\0\2\7\22\0"+
    "\6\7\1\164\21\7\5\0\2\7\22\0\13\7\1\165"+
    "\14\7\5\0\2\7\22\0\6\7\1\166\21\7\5\0"+
    "\2\7\22\0\1\7\1\167\26\7\5\0\2\7\22\0"+
    "\6\7\1\170\21\7\5\0\2\7\22\0\17\7\1\171"+
    "\10\7\5\0\2\7\22\0\1\172\27\7\5\0\2\7"+
    "\22\0\16\7\1\173\11\7\5\0\2\7\22\0\1\7"+
    "\1\174\26\7\5\0\2\7\22\0\15\7\1\175\12\7"+
    "\5\0\2\7\22\0\6\7\1\176\21\7\5\0\2\7"+
    "\22\0\2\7\1\177\25\7\5\0\2\7\54\0\1\200"+
    "\25\0\34\150\1\151\15\150\1\201\4\150\1\153\1\150"+
    "\52\202\1\203\6\202\34\110\1\111\15\110\1\152\3\110"+
    "\1\204\1\113\1\110\34\202\1\151\15\202\1\203\6\202"+
    "\1\0\4\7\1\205\23\7\5\0\2\7\22\0\3\7"+
    "\1\206\24\7\5\0\2\7\22\0\1\207\27\7\5\0"+
    "\2\7\22\0\14\7\1\210\13\7\5\0\2\7\22\0"+
    "\11\7\1\211\16\7\5\0\2\7\22\0\3\7\1\212"+
    "\24\7\5\0\2\7\22\0\7\7\1\213\20\7\5\0"+
    "\2\7\22\0\20\7\1\214\7\7\5\0\2\7\22\0"+
    "\2\7\1\215\25\7\5\0\2\7\22\0\11\7\1\216"+
    "\16\7\5\0\2\7\22\0\7\7\1\217\20\7\5\0"+
    "\2\7\22\0\21\7\1\220\6\7\5\0\2\7\22\0"+
    "\13\7\1\221\14\7\5\0\2\7\22\0\6\7\1\222"+
    "\21\7\5\0\2\7\22\0\2\7\1\223\25\7\5\0"+
    "\2\7\22\0\3\7\1\224\24\7\5\0\2\7\21\0"+
    "\34\200\1\0\1\225\21\200\1\0\1\200\34\150\1\151"+
    "\15\150\1\201\3\150\1\204\1\153\1\150\52\202\1\203"+
    "\3\202\1\111\2\202\1\0\3\7\1\226\24\7\5\0"+
    "\2\7\22\0\1\7\1\227\26\7\5\0\2\7\22\0"+
    "\15\7\1\230\12\7\5\0\2\7\22\0\6\7\1\231"+
    "\21\7\5\0\2\7\22\0\14\7\1\232\13\7\5\0"+
    "\2\7\22\0\16\7\1\233\11\7\5\0\2\7\22\0"+
    "\1\7\1\234\26\7\5\0\2\7\22\0\6\7\1\235"+
    "\21\7\5\0\2\7\22\0\7\7\1\236\20\7\5\0"+
    "\2\7\22\0\12\7\1\237\15\7\5\0\2\7\22\0"+
    "\3\7\1\240\24\7\5\0\2\7\22\0\16\7\1\241"+
    "\11\7\5\0\2\7\22\0\13\7\1\242\14\7\5\0"+
    "\2\7\21\0\10\200\1\243\23\200\1\0\1\225\21\200"+
    "\1\0\1\200\1\0\12\7\1\244\15\7\5\0\2\7"+
    "\22\0\4\7\1\245\23\7\5\0\2\7\22\0\4\7"+
    "\1\246\23\7\5\0\2\7\22\0\1\7\1\247\26\7"+
    "\5\0\2\7\22\0\3\7\1\250\24\7\5\0\2\7"+
    "\22\0\21\7\1\251\6\7\5\0\2\7\22\0\3\7"+
    "\1\252\24\7\5\0\2\7\21\0\7\200\1\253\24\200"+
    "\1\0\1\225\21\200\1\0\1\200\1\0\15\7\1\254"+
    "\12\7\5\0\2\7\22\0\7\7\1\255\20\7\5\0"+
    "\2\7\22\0\10\7\1\256\17\7\5\0\2\7\22\0"+
    "\7\7\1\257\20\7\5\0\2\7\22\0\1\7\1\260"+
    "\26\7\5\0\2\7\22\0\4\7\1\261\23\7\5\0"+
    "\2\7\21\0\32\200\1\262\1\200\1\0\1\225\21\200"+
    "\1\0\1\200\1\0\4\7\1\263\23\7\5\0\2\7"+
    "\22\0\1\7\1\264\26\7\5\0\2\7\22\0\6\7"+
    "\1\265\21\7\5\0\2\7\22\0\7\7\1\266\20\7"+
    "\5\0\2\7\22\0\3\7\1\267\24\7\5\0\2\7"+
    "\21\0\11\200\1\270\2\200\1\270\17\200\1\0\1\225"+
    "\21\200\1\0\1\200\1\0\10\7\1\271\17\7\5\0"+
    "\2\7\22\0\6\7\1\272\21\7\5\0\2\7\21\0"+
    "\11\200\1\273\2\200\1\273\17\200\1\0\1\225\21\200"+
    "\1\0\1\200";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6713];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\22\1\1\11\1\1\1\11\1\1\4\11"+
    "\1\1\7\11\4\1\1\11\30\1\3\0\1\11\1\0"+
    "\1\11\1\0\1\1\1\11\32\1\2\0\1\1\1\0"+
    "\25\1\4\0\21\1\1\0\15\1\1\0\7\1\1\0"+
    "\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer stringLiteralBuffer = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerLa(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerLa(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScriptureToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { /* ignore */
          }
        case 51: break;
        case 11: 
          { return new ScriptureToken(ScriptureTokenType.EQUAL, null, yyline, yychar);
          }
        case 52: break;
        case 29: 
          { return new ScriptureToken(ScriptureTokenType.REAL_LITERAL, yytext(), yyline, yychar);
          }
        case 53: break;
        case 9: 
          { return new ScriptureToken(ScriptureTokenType.DELIMITER, null, yyline, yychar);
          }
        case 54: break;
        case 14: 
          { return new ScriptureToken(ScriptureTokenType.RIGHT_BRACKET, null, yyline, yychar);
          }
        case 55: break;
        case 38: 
          { return new ScriptureToken(ScriptureTokenType.PRAY, yytext(), yyline, yychar);
          }
        case 56: break;
        case 37: 
          { return new ScriptureToken(ScriptureTokenType.FALSE, yytext(), yyline, yychar);
          }
        case 57: break;
        case 17: 
          { return new ScriptureToken(ScriptureTokenType.MULTIPLICATION_OPERATOR, null, yyline, yychar);
          }
        case 58: break;
        case 30: 
          { return new ScriptureToken(ScriptureTokenType.AMEN, yytext(), yyline, yychar);
          }
        case 59: break;
        case 2: 
          { return new ScriptureToken(ScriptureTokenType.IDENTIFIER, yytext(), yyline, yychar);
          }
        case 60: break;
        case 10: 
          { return new ScriptureToken(ScriptureTokenType.SEMICOLON, null, yyline, yychar);
          }
        case 61: break;
        case 18: 
          { return new ScriptureToken(ScriptureTokenType.DIVISION_OPERATOR, yytext(), yyline, yychar);
          }
        case 62: break;
        case 36: 
          { return new ScriptureToken(ScriptureTokenType.TRUE, yytext(), yyline, yychar);
          }
        case 63: break;
        case 32: 
          { return new ScriptureToken(ScriptureTokenType.XOR, yytext(), yyline, yychar);
          }
        case 64: break;
        case 5: 
          { return new ScriptureToken(ScriptureTokenType.LEFT_PARENTHESIS, null, yyline, yychar);
          }
        case 65: break;
        case 33: 
          { return new ScriptureToken(ScriptureTokenType.BOOLEAN, yytext(), yyline, yychar);
          }
        case 66: break;
        case 23: 
          { return new ScriptureToken(ScriptureTokenType.IF, yytext(), yyline, yychar);
          }
        case 67: break;
        case 16: 
          { return new ScriptureToken(ScriptureTokenType.SUBTRACTION_OPERATOR, null, yyline, yychar);
          }
        case 68: break;
        case 7: 
          { return new ScriptureToken(ScriptureTokenType.RIGHT_PARENTHESIS, null, yyline, yychar);
          }
        case 69: break;
        case 35: 
          { return new ScriptureToken(ScriptureTokenType.ELSE, yytext(), yyline, yychar);
          }
        case 70: break;
        case 21: 
          { stringLiteralBuffer.append(yytext()); yybegin(YYINITIAL); return new ScriptureToken(ScriptureTokenType.STRING_LITERAL, stringLiteralBuffer.toString(), yyline, yychar);
          }
        case 71: break;
        case 48: 
          { return new ScriptureToken(ScriptureTokenType.COMMANDMENT, yytext(), yyline, yychar);
          }
        case 72: break;
        case 49: 
          { return new ScriptureToken(ScriptureTokenType.ARTIFACT, yytext(), yyline, yychar);
          }
        case 73: break;
        case 4: 
          { return new ScriptureToken(ScriptureTokenType.DOT, null, yyline, yychar);
          }
        case 74: break;
        case 3: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER_LITERAL, yytext(), yyline, yychar);
          }
        case 75: break;
        case 46: 
          { return new ScriptureToken(ScriptureTokenType.SCRIPTURE, yytext(), yyline, yychar);
          }
        case 76: break;
        case 25: 
          { return new ScriptureToken(ScriptureTokenType.OF, yytext(), yyline, yychar);
          }
        case 77: break;
        case 41: 
          { return new ScriptureToken(ScriptureTokenType.STRING, yytext(), yyline, yychar);
          }
        case 78: break;
        case 45: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP_LITERAL, yytext(), yyline, yychar);
          }
        case 79: break;
        case 26: 
          { return new ScriptureToken(ScriptureTokenType.OR, yytext(), yyline, yychar);
          }
        case 80: break;
        case 34: 
          { return new ScriptureToken(ScriptureTokenType.ALIAS, yytext(), yyline, yychar);
          }
        case 81: break;
        case 42: 
          { return new ScriptureToken(ScriptureTokenType.CREATE, yytext(), yyline, yychar);
          }
        case 82: break;
        case 22: 
          { stringLiteralBuffer.append('\\');
          }
        case 83: break;
        case 28: 
          { return new ScriptureToken(ScriptureTokenType.NOT, yytext(), yyline, yychar);
          }
        case 84: break;
        case 40: 
          { return new ScriptureToken(ScriptureTokenType.CREATION, yytext(), yyline, yychar);
          }
        case 85: break;
        case 15: 
          { return new ScriptureToken(ScriptureTokenType.ADDITION_OPERATOR, null, yyline, yychar);
          }
        case 86: break;
        case 43: 
          { return new ScriptureToken(ScriptureTokenType.GENESIS, yytext(), yyline, yychar);
          }
        case 87: break;
        case 44: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER, yytext(), yyline, yychar);
          }
        case 88: break;
        case 27: 
          { return new ScriptureToken(ScriptureTokenType.REAL, yytext(), yyline, yychar);
          }
        case 89: break;
        case 12: 
          { return new ScriptureToken(ScriptureTokenType.COMMA, null, yyline, yychar);
          }
        case 90: break;
        case 20: 
          { stringLiteralBuffer.append(yytext());
          }
        case 91: break;
        case 50: 
          { return new ScriptureToken(ScriptureTokenType.PROPHECY, yytext(), yyline, yychar);
          }
        case 92: break;
        case 39: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP, yytext(), yyline, yychar);
          }
        case 93: break;
        case 24: 
          { return new ScriptureToken(ScriptureTokenType.AND, yytext(), yyline, yychar);
          }
        case 94: break;
        case 8: 
          { stringLiteralBuffer.setLength(0); stringLiteralBuffer.append(yytext()); yybegin(STRING);
          }
        case 95: break;
        case 19: 
          { return new ScriptureToken(ScriptureTokenType.COMPARATIVE_OPERATOR, yytext(), yyline, yychar);
          }
        case 96: break;
        case 47: 
          { return new ScriptureToken(ScriptureTokenType.PREACH, yytext(), yyline, yychar);
          }
        case 97: break;
        case 1: 
          { throw new ScriptureLexerException(yytext(), yyline, yychar);
          }
        case 98: break;
        case 31: 
          { return new ScriptureToken(ScriptureTokenType.ORDER, yytext(), yyline, yychar);
          }
        case 99: break;
        case 13: 
          { return new ScriptureToken(ScriptureTokenType.LEFT_BRACKET, null, yyline, yychar);
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new ScriptureToken(ScriptureTokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
