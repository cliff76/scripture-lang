/* The following code was generated by JFlex 1.4.3 on 9/12/09 6:08 AM */

package com.quesoconcarne.scripture.parser;

/**
 * This is the lexer class for all English locales.
 */

final class LexerEn {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int REGEXP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\32\1\1\1\1\1\0\2\1\16\32\4\0\1\24\3\0\1\30"+
    "\13\0\12\32\1\27\6\0\32\30\4\0\1\30\1\0\1\3\1\25"+
    "\1\14\1\20\1\6\1\2\1\23\1\21\1\15\1\31\1\30\1\4"+
    "\1\12\1\13\1\17\1\16\1\30\1\10\1\5\1\7\1\11\2\30"+
    "\1\26\1\22\1\30\4\0\41\32\2\0\4\30\4\0\1\30\2\0"+
    "\1\32\7\0\1\30\4\0\1\30\5\0\27\30\1\0\37\30\1\0"+
    "\u013f\30\31\0\162\30\4\0\14\30\16\0\5\30\11\0\1\30\21\0"+
    "\130\32\5\0\23\32\12\0\1\30\13\0\1\30\1\0\3\30\1\0"+
    "\1\30\1\0\24\30\1\0\54\30\1\0\46\30\1\0\5\30\4\0"+
    "\202\30\1\0\4\32\3\0\105\30\1\0\46\30\2\0\2\30\6\0"+
    "\20\30\41\0\46\30\2\0\1\30\7\0\47\30\11\0\21\32\1\0"+
    "\27\32\1\0\3\32\1\0\1\32\1\0\2\32\1\0\1\32\13\0"+
    "\33\30\5\0\3\30\15\0\4\32\14\0\6\32\13\0\32\30\5\0"+
    "\13\30\16\32\7\0\12\32\4\0\2\30\1\32\143\30\1\0\1\30"+
    "\10\32\1\0\6\32\2\30\2\32\1\0\4\32\2\30\12\32\3\30"+
    "\2\0\1\30\17\0\1\32\1\30\1\32\36\30\33\32\2\0\3\30"+
    "\60\0\46\30\13\32\1\30\u014f\0\3\32\66\30\2\0\1\32\1\30"+
    "\20\32\2\0\1\30\4\32\3\0\12\30\2\32\2\0\12\32\21\0"+
    "\3\32\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\1\30\3\0\4\30\2\0\1\32\1\30\7\32\2\0\2\32\2\0"+
    "\3\32\11\0\1\32\4\0\2\30\1\0\3\30\2\32\2\0\12\32"+
    "\4\30\15\0\3\32\1\0\6\30\4\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0\1\32\1\0"+
    "\5\32\4\0\2\32\2\0\3\32\13\0\4\30\1\0\1\30\7\0"+
    "\14\32\3\30\14\0\3\32\1\0\11\30\1\0\3\30\1\0\26\30"+
    "\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\32\1\30\10\32"+
    "\1\0\3\32\1\0\3\32\2\0\1\30\17\0\2\30\2\32\2\0"+
    "\12\32\1\0\1\30\17\0\3\32\1\0\10\30\2\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\32\1\30"+
    "\6\32\3\0\2\32\2\0\3\32\10\0\2\32\4\0\2\30\1\0"+
    "\3\30\4\0\12\32\1\0\1\30\20\0\1\32\1\30\1\0\6\30"+
    "\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0\2\30"+
    "\3\0\2\30\3\0\3\30\3\0\10\30\1\0\3\30\4\0\5\32"+
    "\3\0\3\32\1\0\4\32\11\0\1\32\17\0\11\32\11\0\1\30"+
    "\7\0\3\32\1\0\10\30\1\0\3\30\1\0\27\30\1\0\12\30"+
    "\1\0\5\30\4\0\7\32\1\0\3\32\1\0\4\32\7\0\2\32"+
    "\11\0\2\30\4\0\12\32\22\0\2\32\1\0\10\30\1\0\3\30"+
    "\1\0\27\30\1\0\12\30\1\0\5\30\2\0\1\32\1\30\7\32"+
    "\1\0\3\32\1\0\4\32\7\0\2\32\7\0\1\30\1\0\2\30"+
    "\4\0\12\32\22\0\2\32\1\0\10\30\1\0\3\30\1\0\27\30"+
    "\1\0\20\30\4\0\6\32\2\0\3\32\1\0\4\32\11\0\1\32"+
    "\10\0\2\30\4\0\12\32\22\0\2\32\1\0\22\30\3\0\30\30"+
    "\1\0\11\30\1\0\1\30\2\0\7\30\3\0\1\32\4\0\6\32"+
    "\1\0\1\32\1\0\10\32\22\0\2\32\15\0\60\30\1\32\2\30"+
    "\7\32\4\0\10\30\10\32\1\0\12\32\47\0\2\30\1\0\1\30"+
    "\2\0\2\30\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30"+
    "\1\0\3\30\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30"+
    "\1\32\2\30\6\32\1\0\2\32\1\30\2\0\5\30\1\0\1\30"+
    "\1\0\6\32\2\0\12\32\2\0\2\30\42\0\1\30\27\0\2\32"+
    "\6\0\12\32\13\0\1\32\1\0\1\32\1\0\1\32\4\0\2\32"+
    "\10\30\1\0\42\30\6\0\24\32\1\0\2\32\4\30\4\0\10\32"+
    "\1\0\44\32\11\0\1\32\71\0\42\30\1\0\5\30\1\0\2\30"+
    "\1\0\7\32\3\0\4\32\6\0\12\32\6\0\6\30\4\32\106\0"+
    "\46\30\12\0\51\30\7\0\132\30\5\0\104\30\5\0\122\30\6\0"+
    "\7\30\1\0\77\30\1\0\1\30\1\0\4\30\2\0\7\30\1\0"+
    "\1\30\1\0\4\30\2\0\47\30\1\0\1\30\1\0\4\30\2\0"+
    "\37\30\1\0\1\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0"+
    "\4\30\2\0\7\30\1\0\7\30\1\0\27\30\1\0\37\30\1\0"+
    "\1\30\1\0\4\30\2\0\7\30\1\0\47\30\1\0\23\30\16\0"+
    "\11\32\56\0\125\30\14\0\u026c\30\2\0\10\30\12\0\32\30\5\0"+
    "\113\30\3\0\3\30\17\0\15\30\1\0\4\30\3\32\13\0\22\30"+
    "\3\32\13\0\22\30\2\32\14\0\15\30\1\0\3\30\1\0\2\32"+
    "\14\0\64\30\40\32\3\0\1\30\3\0\2\30\1\32\2\0\12\32"+
    "\41\0\3\32\2\0\12\32\6\0\130\30\10\0\51\30\1\32\126\0"+
    "\35\30\3\0\14\32\4\0\14\32\12\0\12\32\36\30\2\0\5\30"+
    "\u038b\0\154\30\224\0\234\30\4\0\132\30\6\0\26\30\2\0\6\30"+
    "\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\37\30\2\0\65\30\1\0\7\30\1\0\1\30"+
    "\3\0\3\30\1\0\7\30\3\0\4\30\2\0\6\30\4\0\15\30"+
    "\5\0\3\30\1\0\7\30\17\0\4\32\32\0\5\32\20\0\2\30"+
    "\23\0\1\30\13\0\4\32\6\0\6\32\1\0\1\30\15\0\1\30"+
    "\40\0\22\30\36\0\15\32\4\0\1\32\3\0\6\32\27\0\1\30"+
    "\4\0\1\30\2\0\12\30\1\0\1\30\3\0\5\30\6\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\4\30\1\0\3\30\1\0\7\30"+
    "\3\0\3\30\5\0\5\30\26\0\44\30\u0e81\0\3\30\31\0\11\30"+
    "\6\32\1\0\5\30\2\0\5\30\4\0\126\30\2\0\2\32\2\0"+
    "\3\30\1\0\137\30\5\0\50\30\4\0\136\30\21\0\30\30\70\0"+
    "\20\30\u0200\0\u19b6\30\112\0\u51a6\30\132\0\u048d\30\u0773\0\u2ba4\30\u215c\0"+
    "\u012e\30\2\0\73\30\225\0\7\30\14\0\5\30\5\0\1\30\1\32"+
    "\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0"+
    "\2\30\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0"+
    "\15\30\3\0\20\32\20\0\4\32\17\0\2\30\30\0\3\30\31\0"+
    "\1\30\6\0\5\30\1\0\207\30\2\0\1\32\4\0\1\30\13\0"+
    "\12\32\7\0\32\30\4\0\1\30\1\0\32\30\12\0\132\30\3\0"+
    "\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0\2\30\3\0"+
    "\2\30\22\0\3\32\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\5\3\1\4\4\3\1\4\2\3"+
    "\2\4\2\3\1\4\16\3\1\5\2\3\1\6\1\7"+
    "\7\3\1\10\7\3\1\11\11\3\1\12\3\3\1\13"+
    "\1\0\2\3\1\14\1\15\1\16\4\3\1\17\5\3"+
    "\1\20\1\21\1\3\1\0\10\3\1\22\3\3\1\0"+
    "\1\23\1\3\1\24\3\3\1\25\4\3\1\0\3\3"+
    "\1\26\1\3\1\27\1\30\1\31\1\0\1\3\1\32"+
    "\1\3\1\33\1\0\1\34\1\3\1\0\1\3\1\0"+
    "\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345"+
    "\0\u0360\0\u037b\0\u0396\0\u03b1\0\u0129\0\u03cc\0\u03e7\0\u0129"+
    "\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf"+
    "\0\u0129\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c"+
    "\0\u0129\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639"+
    "\0\u0654\0\u066f\0\u0129\0\u068a\0\u06a5\0\u06c0\0\u0129\0\u06db"+
    "\0\u06f6\0\u0711\0\u0129\0\u0129\0\u0129\0\u072c\0\u0747\0\u0762"+
    "\0\u077d\0\u0129\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804\0\u0129"+
    "\0\u0129\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1"+
    "\0\u08dc\0\u08f7\0\u0912\0\u0129\0\u092d\0\u0948\0\u0963\0\u097e"+
    "\0\u0129\0\u0999\0\u0129\0\u09b4\0\u09cf\0\u09ea\0\u0129\0\u0a05"+
    "\0\u0a20\0\u0a3b\0\u0a56\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0129"+
    "\0\u0add\0\u0129\0\u0129\0\u0129\0\u0af8\0\u0b13\0\u0129\0\u0b2e"+
    "\0\u0129\0\u0b49\0\u0129\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0129"+
    "\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\14\1\23\1\4\1\24\1\25\1\26\1\14\1\22"+
    "\34\3\34\0\1\4\22\0\1\4\10\0\1\14\1\27"+
    "\20\14\1\0\2\14\1\0\3\14\2\0\2\14\1\30"+
    "\3\14\1\31\1\14\1\32\1\33\10\14\1\0\2\14"+
    "\1\0\3\14\2\0\4\14\1\34\15\14\1\0\2\14"+
    "\1\0\3\14\2\0\5\14\1\35\4\14\1\36\7\14"+
    "\1\0\2\14\1\0\3\14\2\0\2\14\1\37\17\14"+
    "\1\0\2\14\1\0\3\14\2\0\5\14\1\22\1\40"+
    "\4\14\1\22\2\14\1\22\2\14\1\22\1\0\2\14"+
    "\1\26\1\14\1\22\1\14\2\0\4\14\1\41\15\14"+
    "\1\0\2\14\1\0\3\14\2\0\22\14\1\0\2\14"+
    "\1\0\3\14\2\0\15\14\1\42\4\14\1\0\2\14"+
    "\1\0\3\14\2\0\6\14\1\43\6\14\1\44\4\14"+
    "\1\0\2\14\1\0\3\14\2\0\1\45\4\14\1\22"+
    "\3\14\1\46\1\14\1\22\2\14\1\22\2\14\1\22"+
    "\1\0\2\14\1\26\1\14\1\22\1\14\2\0\6\14"+
    "\1\47\13\14\1\0\2\14\1\0\3\14\2\0\1\50"+
    "\5\14\1\51\13\14\1\0\2\14\1\0\3\14\2\0"+
    "\5\14\1\22\5\14\1\22\2\14\1\22\2\14\1\22"+
    "\1\0\2\14\1\26\1\14\1\22\1\14\2\0\4\14"+
    "\1\52\1\22\5\14\1\22\2\14\1\22\2\14\1\22"+
    "\1\0\2\14\1\26\1\14\1\22\1\14\2\0\15\14"+
    "\1\53\4\14\1\0\2\14\1\0\3\14\2\0\15\14"+
    "\1\54\4\14\1\0\2\14\1\0\3\14\7\0\1\26"+
    "\5\0\1\26\2\0\1\26\2\0\1\26\3\0\1\26"+
    "\1\0\1\26\3\0\2\14\1\55\17\14\1\0\2\14"+
    "\1\0\3\14\2\0\13\14\1\56\6\14\1\0\2\14"+
    "\1\0\3\14\2\0\5\14\1\57\14\14\1\0\2\14"+
    "\1\0\3\14\2\0\4\14\1\60\15\14\1\0\2\14"+
    "\1\0\3\14\2\0\16\14\1\61\3\14\1\0\2\14"+
    "\1\0\3\14\2\0\5\14\1\62\14\14\1\0\2\14"+
    "\1\0\3\14\2\0\6\14\1\63\13\14\1\0\2\14"+
    "\1\0\3\14\2\0\6\14\1\64\13\14\1\0\2\14"+
    "\1\0\3\14\2\0\3\14\1\65\16\14\1\0\2\14"+
    "\1\0\3\14\2\0\7\14\1\66\12\14\1\0\2\14"+
    "\1\0\3\14\2\0\1\14\1\67\17\14\1\70\1\0"+
    "\2\14\1\0\3\14\2\0\5\14\1\71\14\14\1\0"+
    "\2\14\1\0\3\14\2\0\4\14\1\72\15\14\1\0"+
    "\2\14\1\0\3\14\2\0\10\14\1\73\11\14\1\0"+
    "\2\14\1\0\3\14\2\0\5\14\1\74\14\14\1\0"+
    "\2\14\1\0\3\14\2\0\1\14\1\75\2\14\1\76"+
    "\10\14\1\77\4\14\1\0\2\14\1\0\3\14\2\0"+
    "\16\14\1\100\3\14\1\0\2\14\1\0\3\14\2\0"+
    "\11\14\1\101\10\14\1\0\2\14\1\0\3\14\2\0"+
    "\15\14\1\102\4\14\1\0\2\14\1\0\3\14\2\0"+
    "\6\14\1\103\13\14\1\0\2\14\1\0\3\14\2\0"+
    "\3\14\1\104\16\14\1\0\2\14\1\0\3\14\2\0"+
    "\1\14\1\105\20\14\1\0\2\14\1\0\3\14\2\0"+
    "\13\14\1\106\6\14\1\0\2\14\1\0\3\14\2\0"+
    "\11\14\1\107\10\14\1\0\2\14\1\0\3\14\2\0"+
    "\22\14\1\110\2\14\1\0\3\14\2\0\13\14\1\111"+
    "\6\14\1\0\2\14\1\0\3\14\2\0\13\14\1\112"+
    "\6\14\1\0\2\14\1\0\3\14\2\0\4\14\1\113"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\4\14\1\114"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\2\14\1\115"+
    "\17\14\1\0\2\14\1\0\3\14\2\0\4\14\1\116"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\1\14\1\117"+
    "\20\14\1\0\2\14\1\0\3\14\2\0\10\14\1\120"+
    "\11\14\1\0\2\14\1\0\3\14\2\0\4\14\1\121"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\20\14\1\122"+
    "\1\14\1\0\2\14\1\0\3\14\2\0\1\14\1\123"+
    "\20\14\1\0\2\14\1\0\3\14\2\0\14\14\1\124"+
    "\5\14\1\0\2\14\1\0\3\14\2\0\4\14\1\125"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\4\14\1\126"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\2\14\1\127"+
    "\17\14\1\0\2\14\1\0\3\14\2\0\4\14\1\130"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\3\14\1\131"+
    "\16\14\1\0\2\14\1\0\3\14\2\0\1\132\21\14"+
    "\1\0\2\14\1\0\3\14\7\0\1\133\25\0\11\14"+
    "\1\134\10\14\1\0\2\14\1\0\3\14\2\0\14\14"+
    "\1\135\5\14\1\0\2\14\1\0\3\14\2\0\22\14"+
    "\1\0\1\14\1\136\1\0\3\14\2\0\5\14\1\137"+
    "\14\14\1\0\2\14\1\0\3\14\2\0\1\14\1\140"+
    "\20\14\1\0\2\14\1\0\3\14\2\0\21\14\1\141"+
    "\1\0\2\14\1\0\3\14\2\0\12\14\1\142\7\14"+
    "\1\0\2\14\1\0\3\14\2\0\17\14\1\143\2\14"+
    "\1\0\2\14\1\0\3\14\2\0\6\14\1\144\13\14"+
    "\1\0\2\14\1\0\3\14\2\0\3\14\1\145\16\14"+
    "\1\0\2\14\1\0\3\14\2\0\4\14\1\146\15\14"+
    "\1\0\2\14\1\0\3\14\2\0\1\14\1\147\20\14"+
    "\1\0\2\14\1\0\3\14\21\0\1\150\13\0\21\14"+
    "\1\151\1\0\2\14\1\0\3\14\2\0\5\14\1\152"+
    "\14\14\1\0\2\14\1\0\3\14\2\0\14\14\1\153"+
    "\5\14\1\0\2\14\1\0\3\14\2\0\13\14\1\154"+
    "\6\14\1\0\2\14\1\0\3\14\2\0\11\14\1\155"+
    "\10\14\1\0\2\14\1\0\3\14\2\0\4\14\1\156"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\17\14\1\157"+
    "\2\14\1\0\2\14\1\0\3\14\2\0\4\14\1\160"+
    "\15\14\1\0\2\14\1\0\3\14\2\0\13\14\1\161"+
    "\6\14\1\0\2\14\1\0\3\14\2\0\1\14\1\162"+
    "\20\14\1\0\2\14\1\0\3\14\2\0\12\14\1\163"+
    "\7\14\1\0\2\14\1\0\3\14\6\0\1\164\26\0"+
    "\7\14\1\165\12\14\1\0\2\14\1\0\3\14\2\0"+
    "\15\14\1\166\4\14\1\0\2\14\1\0\3\14\2\0"+
    "\16\14\1\167\3\14\1\0\2\14\1\0\3\14\2\0"+
    "\6\14\1\170\13\14\1\0\2\14\1\0\3\14\2\0"+
    "\12\14\1\171\7\14\1\0\2\14\1\0\3\14\2\0"+
    "\3\14\1\172\16\14\1\0\2\14\1\0\3\14\2\0"+
    "\11\14\1\173\10\14\1\0\2\14\1\0\3\14\2\0"+
    "\5\14\1\174\14\14\1\0\2\14\1\0\3\14\10\0"+
    "\1\175\24\0\6\14\1\176\13\14\1\0\2\14\1\0"+
    "\3\14\2\0\11\14\1\177\10\14\1\0\2\14\1\0"+
    "\3\14\2\0\10\14\1\200\11\14\1\0\2\14\1\0"+
    "\3\14\2\0\20\14\1\201\1\14\1\0\2\14\1\0"+
    "\3\14\6\0\1\202\26\0\4\14\1\203\15\14\1\0"+
    "\2\14\1\0\3\14\2\0\4\14\1\204\15\14\1\0"+
    "\2\14\1\0\3\14\24\0\1\205\10\0\11\14\1\206"+
    "\10\14\1\0\2\14\1\0\3\14\25\0\1\207\7\0"+
    "\5\14\1\210\14\14\1\0\2\14\1\0\3\14\6\0"+
    "\1\211\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\104\1\1\0\22\1\1\0\14\1\1\0"+
    "\13\1\1\0\10\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerEn(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerEn(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1708) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScriptureToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return new ScriptureToken(ScriptureTokenType.CREATION, yytext(), yyline, yychar);
          }
        case 31: break;
        case 3: 
          { return new ScriptureToken(ScriptureTokenType.IDENTIFIER, yytext(), yyline, yychar);
          }
        case 32: break;
        case 17: 
          { return new ScriptureToken(ScriptureTokenType.ALIAS, yytext(), yyline, yychar);
          }
        case 33: break;
        case 21: 
          { return new ScriptureToken(ScriptureTokenType.PREACH, yytext(), yyline, yychar);
          }
        case 34: break;
        case 8: 
          { return new ScriptureToken(ScriptureTokenType.AND, yytext(), yyline, yychar);
          }
        case 35: break;
        case 28: 
          { return new ScriptureToken(ScriptureTokenType.SCRIPTURE, yytext(), yyline, yychar);
          }
        case 36: break;
        case 7: 
          { return new ScriptureToken(ScriptureTokenType.OR, yytext(), yyline, yychar);
          }
        case 37: break;
        case 23: 
          { return new ScriptureToken(ScriptureTokenType.GENESIS, yytext(), yyline, yychar);
          }
        case 38: break;
        case 14: 
          { return new ScriptureToken(ScriptureTokenType.REAL, yytext(), yyline, yychar);
          }
        case 39: break;
        case 11: 
          { return new ScriptureToken(ScriptureTokenType.AMEN, yytext(), yyline, yychar);
          }
        case 40: break;
        case 9: 
          { return new ScriptureToken(ScriptureTokenType.NOT, yytext(), yyline, yychar);
          }
        case 41: break;
        case 15: 
          { return new ScriptureToken(ScriptureTokenType.PRAY, yytext(), yyline, yychar);
          }
        case 42: break;
        case 13: 
          { return new ScriptureToken(ScriptureTokenType.TRUE, yytext(), yyline, yychar);
          }
        case 43: break;
        case 27: 
          { return new ScriptureToken(ScriptureTokenType.PROPHECY, yytext(), yyline, yychar);
          }
        case 44: break;
        case 25: 
          { return new ScriptureToken(ScriptureTokenType.ARTIFACT, yytext(), yyline, yychar);
          }
        case 45: break;
        case 29: 
          { return new ScriptureToken(ScriptureTokenType.COMMANDMENT, yytext(), yyline, yychar);
          }
        case 46: break;
        case 22: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER, yytext(), yyline, yychar);
          }
        case 47: break;
        case 1: 
          { throw new RuntimeException("Illegal character <"+ yytext()+">");
          }
        case 48: break;
        case 24: 
          { return new ScriptureToken(ScriptureTokenType.BOOLEAN, yytext(), yyline, yychar);
          }
        case 49: break;
        case 10: 
          { return new ScriptureToken(ScriptureTokenType.XOR, yytext(), yyline, yychar);
          }
        case 50: break;
        case 4: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER_LITERAL, yytext(), yyline, yychar);
          }
        case 51: break;
        case 19: 
          { return new ScriptureToken(ScriptureTokenType.STRING, yytext(), yyline, yychar);
          }
        case 52: break;
        case 20: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP, yytext(), yyline, yychar);
          }
        case 53: break;
        case 12: 
          { return new ScriptureToken(ScriptureTokenType.ELSE, yytext(), yyline, yychar);
          }
        case 54: break;
        case 5: 
          { return new ScriptureToken(ScriptureTokenType.IF, yytext(), yyline, yychar);
          }
        case 55: break;
        case 30: 
          { return new ScriptureToken(ScriptureTokenType.CREATE, yytext(), yyline, yychar);
          }
        case 56: break;
        case 6: 
          { return new ScriptureToken(ScriptureTokenType.OF, yytext(), yyline, yychar);
          }
        case 57: break;
        case 18: 
          { return new ScriptureToken(ScriptureTokenType.ORDER, yytext(), yyline, yychar);
          }
        case 58: break;
        case 16: 
          { return new ScriptureToken(ScriptureTokenType.FALSE, yytext(), yyline, yychar);
          }
        case 59: break;
        case 2: 
          { /* ignore */
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new ScriptureToken(ScriptureTokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
