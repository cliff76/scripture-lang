/* The following code was generated by JFlex 1.4.3 on 9/12/09 10:44 AM */

package com.quesoconcarne.scripture.parser;

/**
 * This is the lexer class for all English locales.
 */

final class LexerEn implements ScriptureLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int REGEXP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\36\1\52\1\40\1\0\1\52\1\51\16\36\4\0\1\23\1\46"+
    "\1\37\1\50\1\35\1\44\4\0\1\43\1\41\1\0\1\42\1\32"+
    "\1\33\1\27\11\31\2\0\1\47\1\45\1\47\2\0\6\30\24\35"+
    "\1\0\1\34\2\0\1\35\1\0\1\2\1\24\1\13\1\17\1\5"+
    "\1\1\1\22\1\20\1\14\2\35\1\3\1\11\1\12\1\16\1\15"+
    "\1\35\1\7\1\4\1\6\1\10\2\35\1\25\1\21\1\35\4\0"+
    "\41\36\2\0\4\35\4\0\1\35\2\0\1\36\7\0\1\35\4\0"+
    "\1\35\5\0\27\35\1\0\37\35\1\0\u013f\35\31\0\162\35\4\0"+
    "\14\35\16\0\5\35\11\0\1\35\21\0\130\36\5\0\23\36\12\0"+
    "\1\35\13\0\1\35\1\0\3\35\1\0\1\35\1\0\24\35\1\0"+
    "\54\35\1\0\46\35\1\0\5\35\4\0\202\35\1\0\4\36\3\0"+
    "\105\35\1\0\46\35\2\0\2\35\6\0\20\35\41\0\46\35\2\0"+
    "\1\35\7\0\47\35\11\0\21\36\1\0\27\36\1\0\3\36\1\0"+
    "\1\36\1\0\2\36\1\0\1\36\13\0\33\35\5\0\3\35\15\0"+
    "\4\36\14\0\6\36\13\0\32\35\5\0\13\35\16\36\7\0\12\26"+
    "\4\0\2\35\1\36\143\35\1\0\1\35\10\36\1\0\6\36\2\35"+
    "\2\36\1\0\4\36\2\35\12\26\3\35\2\0\1\35\17\0\1\36"+
    "\1\35\1\36\36\35\33\36\2\0\3\35\60\0\46\35\13\36\1\35"+
    "\u014f\0\3\36\66\35\2\0\1\36\1\35\20\36\2\0\1\35\4\36"+
    "\3\0\12\35\2\36\2\0\12\26\21\0\3\36\1\0\10\35\2\0"+
    "\2\35\2\0\26\35\1\0\7\35\1\0\1\35\3\0\4\35\2\0"+
    "\1\36\1\35\7\36\2\0\2\36\2\0\3\36\11\0\1\36\4\0"+
    "\2\35\1\0\3\35\2\36\2\0\12\26\4\35\15\0\3\36\1\0"+
    "\6\35\4\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\2\35\1\0\2\35\2\0\1\36\1\0\5\36\4\0\2\36\2\0"+
    "\3\36\13\0\4\35\1\0\1\35\7\0\12\26\2\36\3\35\14\0"+
    "\3\36\1\0\11\35\1\0\3\35\1\0\26\35\1\0\7\35\1\0"+
    "\2\35\1\0\5\35\2\0\1\36\1\35\10\36\1\0\3\36\1\0"+
    "\3\36\2\0\1\35\17\0\2\35\2\36\2\0\12\26\1\0\1\35"+
    "\17\0\3\36\1\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\5\35\2\0\1\36\1\35\6\36\3\0\2\36"+
    "\2\0\3\36\10\0\2\36\4\0\2\35\1\0\3\35\4\0\12\26"+
    "\1\0\1\35\20\0\1\36\1\35\1\0\6\35\3\0\3\35\1\0"+
    "\4\35\3\0\2\35\1\0\1\35\1\0\2\35\3\0\2\35\3\0"+
    "\3\35\3\0\10\35\1\0\3\35\4\0\5\36\3\0\3\36\1\0"+
    "\4\36\11\0\1\36\17\0\11\26\11\0\1\35\7\0\3\36\1\0"+
    "\10\35\1\0\3\35\1\0\27\35\1\0\12\35\1\0\5\35\4\0"+
    "\7\36\1\0\3\36\1\0\4\36\7\0\2\36\11\0\2\35\4\0"+
    "\12\26\22\0\2\36\1\0\10\35\1\0\3\35\1\0\27\35\1\0"+
    "\12\35\1\0\5\35\2\0\1\36\1\35\7\36\1\0\3\36\1\0"+
    "\4\36\7\0\2\36\7\0\1\35\1\0\2\35\4\0\12\26\22\0"+
    "\2\36\1\0\10\35\1\0\3\35\1\0\27\35\1\0\20\35\4\0"+
    "\6\36\2\0\3\36\1\0\4\36\11\0\1\36\10\0\2\35\4\0"+
    "\12\26\22\0\2\36\1\0\22\35\3\0\30\35\1\0\11\35\1\0"+
    "\1\35\2\0\7\35\3\0\1\36\4\0\6\36\1\0\1\36\1\0"+
    "\10\36\22\0\2\36\15\0\60\35\1\36\2\35\7\36\4\0\10\35"+
    "\10\36\1\0\12\26\47\0\2\35\1\0\1\35\2\0\2\35\1\0"+
    "\1\35\2\0\1\35\6\0\4\35\1\0\7\35\1\0\3\35\1\0"+
    "\1\35\1\0\1\35\2\0\2\35\1\0\4\35\1\36\2\35\6\36"+
    "\1\0\2\36\1\35\2\0\5\35\1\0\1\35\1\0\6\36\2\0"+
    "\12\26\2\0\2\35\42\0\1\35\27\0\2\36\6\0\12\26\13\0"+
    "\1\36\1\0\1\36\1\0\1\36\4\0\2\36\10\35\1\0\42\35"+
    "\6\0\24\36\1\0\2\36\4\35\4\0\10\36\1\0\44\36\11\0"+
    "\1\36\71\0\42\35\1\0\5\35\1\0\2\35\1\0\7\36\3\0"+
    "\4\36\6\0\12\26\6\0\6\35\4\36\106\0\46\35\12\0\51\35"+
    "\7\0\132\35\5\0\104\35\5\0\122\35\6\0\7\35\1\0\77\35"+
    "\1\0\1\35\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35"+
    "\2\0\47\35\1\0\1\35\1\0\4\35\2\0\37\35\1\0\1\35"+
    "\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35\2\0\7\35"+
    "\1\0\7\35\1\0\27\35\1\0\37\35\1\0\1\35\1\0\4\35"+
    "\2\0\7\35\1\0\47\35\1\0\23\35\16\0\11\26\56\0\125\35"+
    "\14\0\u026c\35\2\0\10\35\12\0\32\35\5\0\113\35\3\0\3\35"+
    "\17\0\15\35\1\0\4\35\3\36\13\0\22\35\3\36\13\0\22\35"+
    "\2\36\14\0\15\35\1\0\3\35\1\0\2\36\14\0\64\35\40\36"+
    "\3\0\1\35\3\0\2\35\1\36\2\0\12\26\41\0\3\36\2\0"+
    "\12\26\6\0\130\35\10\0\51\35\1\36\126\0\35\35\3\0\14\36"+
    "\4\0\14\36\12\0\12\26\36\35\2\0\5\35\u038b\0\154\35\224\0"+
    "\234\35\4\0\132\35\6\0\26\35\2\0\6\35\2\0\46\35\2\0"+
    "\6\35\2\0\10\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\37\35\2\0\65\35\1\0\7\35\1\0\1\35\3\0\3\35\1\0"+
    "\7\35\3\0\4\35\2\0\6\35\4\0\15\35\5\0\3\35\1\0"+
    "\7\35\17\0\4\36\32\0\5\36\20\0\2\35\23\0\1\35\13\0"+
    "\4\36\6\0\6\36\1\0\1\35\15\0\1\35\40\0\22\35\36\0"+
    "\15\36\4\0\1\36\3\0\6\36\27\0\1\35\4\0\1\35\2\0"+
    "\12\35\1\0\1\35\3\0\5\35\6\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\4\35\1\0\3\35\1\0\7\35\3\0\3\35\5\0"+
    "\5\35\26\0\44\35\u0e81\0\3\35\31\0\11\35\6\36\1\0\5\35"+
    "\2\0\5\35\4\0\126\35\2\0\2\36\2\0\3\35\1\0\137\35"+
    "\5\0\50\35\4\0\136\35\21\0\30\35\70\0\20\35\u0200\0\u19b6\35"+
    "\112\0\u51a6\35\132\0\u048d\35\u0773\0\u2ba4\35\u215c\0\u012e\35\2\0\73\35"+
    "\225\0\7\35\14\0\5\35\5\0\1\35\1\36\12\35\1\0\15\35"+
    "\1\0\5\35\1\0\1\35\1\0\2\35\1\0\2\35\1\0\154\35"+
    "\41\0\u016b\35\22\0\100\35\2\0\66\35\50\0\15\35\3\0\20\36"+
    "\20\0\4\36\17\0\2\35\30\0\3\35\31\0\1\35\6\0\5\35"+
    "\1\0\207\35\2\0\1\36\4\0\1\35\13\0\12\26\7\0\32\35"+
    "\4\0\1\35\1\0\32\35\12\0\132\35\3\0\6\35\2\0\6\35"+
    "\2\0\6\35\2\0\3\35\3\0\2\35\3\0\2\35\22\0\3\36"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\16\2\1\3\2\2\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\5\1\1\1\12\1\1\1\13"+
    "\1\14\1\15\17\2\1\16\2\2\1\17\1\20\3\2"+
    "\3\0\1\21\1\0\1\12\1\0\1\3\1\0\1\3"+
    "\1\13\4\2\1\22\4\2\1\12\3\2\1\23\11\2"+
    "\1\24\1\25\1\4\2\21\1\0\1\3\1\0\1\3"+
    "\3\2\1\26\1\0\2\2\1\27\1\30\1\31\4\2"+
    "\1\32\5\2\2\21\3\0\1\3\1\33\1\34\1\2"+
    "\1\0\10\2\1\35\2\2\1\21\1\2\1\0\1\36"+
    "\1\2\1\37\3\2\1\40\4\2\1\0\3\2\1\41"+
    "\1\2\1\42\1\43\1\44\1\0\1\2\1\45\1\2"+
    "\1\46\1\0\1\47\1\2\1\0\1\2\1\0\1\50"+
    "\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\201\0\201\0\201\0\201\0\201\0\u0408\0\u0408\0\u0433"+
    "\0\u045e\0\u0489\0\201\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\u01d9\0\u0739\0\u0764\0\u01d9\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u03dd\0\u0891\0\u08bc\0\201"+
    "\0\u08e7\0\201\0\u0912\0\u093d\0\201\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u01d9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u01d9\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u01d9\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u01d9\0\u083b\0\u0866\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u01d9\0\u0e47\0\u0e72\0\u0e9d\0\u01d9\0\u01d9\0\u01d9\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u01d9\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\201\0\u104b\0\u1076\0\u0d45\0\u10a1\0\u08e7\0\u01d9"+
    "\0\u01d9\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u01d9\0\u127a\0\u12a5\0\u03dd\0\u12d0"+
    "\0\u12fb\0\u01d9\0\u1326\0\u01d9\0\u1351\0\u137c\0\u13a7\0\u01d9"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u01d9\0\u152a\0\u01d9\0\u01d9\0\u01d9\0\u1555\0\u1580\0\u01d9"+
    "\0\u15ab\0\u01d9\0\u15d6\0\u01d9\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u01d9\0\201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\20\1\21\3\14\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\14\1\26\1\4"+
    "\1\30\1\4\1\14\1\4\1\31\1\23\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\1\40\2\23\34\41\1\42"+
    "\2\41\1\43\1\4\10\41\1\4\1\41\53\4\54\0"+
    "\1\14\1\44\20\14\1\0\6\14\3\0\2\14\15\0"+
    "\2\14\1\45\3\14\1\46\1\14\1\47\1\50\10\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\51\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\5\14\1\52\4\14"+
    "\1\53\7\14\1\0\6\14\3\0\2\14\15\0\2\14"+
    "\1\54\1\55\16\14\1\0\6\14\3\0\2\14\15\0"+
    "\6\14\1\56\13\14\1\0\6\14\3\0\2\14\15\0"+
    "\4\14\1\57\15\14\1\0\6\14\3\0\2\14\15\0"+
    "\22\14\1\0\6\14\3\0\2\14\15\0\15\14\1\60"+
    "\4\14\1\0\6\14\3\0\2\14\15\0\6\14\1\61"+
    "\6\14\1\62\4\14\1\0\6\14\3\0\2\14\15\0"+
    "\1\63\10\14\1\64\10\14\1\0\6\14\3\0\2\14"+
    "\15\0\6\14\1\65\13\14\1\0\6\14\3\0\2\14"+
    "\15\0\1\66\5\14\1\67\13\14\1\0\6\14\3\0"+
    "\2\14\15\0\4\14\1\70\15\14\1\0\6\14\3\0"+
    "\2\14\37\0\1\23\14\0\1\23\10\0\2\23\1\0"+
    "\15\14\1\71\4\14\1\0\6\14\3\0\2\14\15\0"+
    "\15\14\1\72\4\14\1\0\6\14\3\0\2\14\42\0"+
    "\2\26\1\0\1\26\1\73\45\0\1\74\2\26\1\0"+
    "\1\26\1\73\20\0\33\75\1\76\1\77\16\75\45\0"+
    "\1\100\5\0\40\101\1\102\2\101\1\103\5\101\1\104"+
    "\1\101\34\41\1\0\2\41\2\0\10\41\1\0\1\41"+
    "\37\0\1\105\14\0\2\14\1\106\17\14\1\0\6\14"+
    "\3\0\2\14\15\0\13\14\1\107\6\14\1\0\6\14"+
    "\3\0\2\14\15\0\5\14\1\110\14\14\1\0\6\14"+
    "\3\0\2\14\15\0\4\14\1\111\15\14\1\0\6\14"+
    "\3\0\2\14\15\0\16\14\1\112\3\14\1\0\6\14"+
    "\3\0\2\14\15\0\5\14\1\113\14\14\1\0\6\14"+
    "\3\0\2\14\15\0\6\14\1\114\13\14\1\0\6\14"+
    "\3\0\2\14\15\0\6\14\1\115\13\14\1\0\6\14"+
    "\3\0\2\14\15\0\3\14\1\116\16\14\1\0\6\14"+
    "\3\0\2\14\15\0\5\14\1\117\14\14\1\0\6\14"+
    "\3\0\2\14\15\0\7\14\1\120\12\14\1\0\6\14"+
    "\3\0\2\14\15\0\1\14\1\121\17\14\1\122\1\0"+
    "\6\14\3\0\2\14\15\0\5\14\1\123\14\14\1\0"+
    "\6\14\3\0\2\14\15\0\4\14\1\124\15\14\1\0"+
    "\6\14\3\0\2\14\15\0\10\14\1\125\11\14\1\0"+
    "\6\14\3\0\2\14\15\0\5\14\1\126\14\14\1\0"+
    "\6\14\3\0\2\14\15\0\1\14\1\127\2\14\1\130"+
    "\10\14\1\131\4\14\1\0\6\14\3\0\2\14\15\0"+
    "\16\14\1\132\3\14\1\0\6\14\3\0\2\14\15\0"+
    "\11\14\1\133\10\14\1\0\6\14\3\0\2\14\15\0"+
    "\15\14\1\134\4\14\1\0\6\14\3\0\2\14\15\0"+
    "\6\14\1\135\13\14\1\0\6\14\3\0\2\14\42\0"+
    "\2\136\1\0\1\136\22\0\2\137\2\0\1\137\5\0"+
    "\1\137\3\0\1\137\4\0\1\137\2\0\3\137\32\0"+
    "\1\140\2\0\1\140\36\0\33\75\1\141\1\77\16\75"+
    "\40\101\1\102\10\101\1\104\1\101\40\142\1\143\2\142"+
    "\1\144\5\142\1\145\1\142\40\0\1\102\13\0\3\14"+
    "\1\146\16\14\1\0\6\14\3\0\2\14\15\0\1\14"+
    "\1\147\20\14\1\0\6\14\3\0\2\14\15\0\13\14"+
    "\1\150\6\14\1\0\6\14\3\0\2\14\15\0\11\14"+
    "\1\151\10\14\1\0\6\14\3\0\2\14\15\0\22\14"+
    "\1\152\6\14\3\0\2\14\15\0\13\14\1\153\6\14"+
    "\1\0\6\14\3\0\2\14\15\0\13\14\1\154\6\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\155\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\156\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\2\14\1\157\17\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\160\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\1\14\1\161\20\14"+
    "\1\0\6\14\3\0\2\14\15\0\10\14\1\162\11\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\163\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\20\14\1\164\1\14"+
    "\1\0\6\14\3\0\2\14\15\0\1\14\1\165\20\14"+
    "\1\0\6\14\3\0\2\14\15\0\14\14\1\166\5\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\167\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\4\14\1\170\15\14"+
    "\1\0\6\14\3\0\2\14\15\0\2\14\1\171\17\14"+
    "\1\0\6\14\3\0\2\14\25\0\1\172\2\0\1\172"+
    "\36\0\11\75\1\173\2\75\1\173\16\75\1\76\1\77"+
    "\16\75\40\142\1\143\2\142\1\174\5\142\1\145\1\142"+
    "\43\175\1\176\7\175\40\101\1\102\2\101\1\144\4\101"+
    "\1\177\1\104\1\101\40\175\1\143\2\175\1\176\7\175"+
    "\1\0\4\14\1\200\15\14\1\0\6\14\3\0\2\14"+
    "\15\0\3\14\1\201\16\14\1\0\6\14\3\0\2\14"+
    "\15\0\1\202\21\14\1\0\6\14\3\0\2\14\22\0"+
    "\1\203\45\0\11\14\1\204\10\14\1\0\6\14\3\0"+
    "\2\14\15\0\14\14\1\205\5\14\1\0\6\14\3\0"+
    "\2\14\15\0\22\14\1\0\1\14\1\206\4\14\3\0"+
    "\2\14\15\0\5\14\1\207\14\14\1\0\6\14\3\0"+
    "\2\14\15\0\1\14\1\210\20\14\1\0\6\14\3\0"+
    "\2\14\15\0\21\14\1\211\1\0\6\14\3\0\2\14"+
    "\15\0\12\14\1\212\7\14\1\0\6\14\3\0\2\14"+
    "\15\0\17\14\1\213\2\14\1\0\6\14\3\0\2\14"+
    "\15\0\6\14\1\214\13\14\1\0\6\14\3\0\2\14"+
    "\15\0\3\14\1\215\16\14\1\0\6\14\3\0\2\14"+
    "\15\0\4\14\1\216\15\14\1\0\6\14\3\0\2\14"+
    "\14\0\11\75\1\217\2\75\1\217\16\75\1\76\1\77"+
    "\16\75\40\142\1\143\2\142\1\174\4\142\1\177\1\145"+
    "\1\142\43\175\1\176\4\175\1\102\2\175\1\0\1\14"+
    "\1\220\20\14\1\0\6\14\3\0\2\14\34\0\1\221"+
    "\33\0\21\14\1\222\1\0\6\14\3\0\2\14\15\0"+
    "\5\14\1\223\14\14\1\0\6\14\3\0\2\14\15\0"+
    "\14\14\1\224\5\14\1\0\6\14\3\0\2\14\15\0"+
    "\13\14\1\225\6\14\1\0\6\14\3\0\2\14\15\0"+
    "\11\14\1\226\10\14\1\0\6\14\3\0\2\14\15\0"+
    "\4\14\1\227\15\14\1\0\6\14\3\0\2\14\15\0"+
    "\17\14\1\230\2\14\1\0\6\14\3\0\2\14\15\0"+
    "\4\14\1\231\15\14\1\0\6\14\3\0\2\14\15\0"+
    "\13\14\1\232\6\14\1\0\6\14\3\0\2\14\15\0"+
    "\1\14\1\233\20\14\1\0\6\14\3\0\2\14\15\0"+
    "\12\14\1\234\7\14\1\0\6\14\3\0\2\14\21\0"+
    "\1\235\46\0\7\14\1\236\12\14\1\0\6\14\3\0"+
    "\2\14\15\0\15\14\1\237\4\14\1\0\6\14\3\0"+
    "\2\14\15\0\16\14\1\240\3\14\1\0\6\14\3\0"+
    "\2\14\15\0\6\14\1\241\13\14\1\0\6\14\3\0"+
    "\2\14\15\0\12\14\1\242\7\14\1\0\6\14\3\0"+
    "\2\14\15\0\3\14\1\243\16\14\1\0\6\14\3\0"+
    "\2\14\15\0\11\14\1\244\10\14\1\0\6\14\3\0"+
    "\2\14\15\0\5\14\1\245\14\14\1\0\6\14\3\0"+
    "\2\14\23\0\1\246\44\0\6\14\1\247\13\14\1\0"+
    "\6\14\3\0\2\14\15\0\11\14\1\250\10\14\1\0"+
    "\6\14\3\0\2\14\15\0\10\14\1\251\11\14\1\0"+
    "\6\14\3\0\2\14\15\0\20\14\1\252\1\14\1\0"+
    "\6\14\3\0\2\14\21\0\1\253\46\0\4\14\1\254"+
    "\15\14\1\0\6\14\3\0\2\14\15\0\4\14\1\255"+
    "\15\14\1\0\6\14\3\0\2\14\37\0\1\256\30\0"+
    "\11\14\1\257\10\14\1\0\6\14\3\0\2\14\40\0"+
    "\1\260\27\0\5\14\1\261\14\14\1\0\6\14\3\0"+
    "\2\14\21\0\1\262\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5805];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\5\11\5\1\1\11\27\1\3\0"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\1\1\1\11"+
    "\34\1\1\0\1\1\1\0\5\1\1\0\17\1\1\11"+
    "\1\1\3\0\4\1\1\0\15\1\1\0\13\1\1\0"+
    "\10\1\1\0\4\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer stringLiteralBuffer = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerEn(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerEn(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScriptureToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { /* ignore */
          }
        case 42: break;
        case 21: 
          { return new ScriptureToken(ScriptureTokenType.REAL_LITERAL, yytext(), yyline, yychar);
          }
        case 43: break;
        case 27: 
          { return new ScriptureToken(ScriptureTokenType.FALSE, yytext(), yyline, yychar);
          }
        case 44: break;
        case 26: 
          { return new ScriptureToken(ScriptureTokenType.PRAY, yytext(), yyline, yychar);
          }
        case 45: break;
        case 9: 
          { return new ScriptureToken(ScriptureTokenType.MULTIPLICATION_OPERATOR, null, yyline, yychar);
          }
        case 46: break;
        case 22: 
          { return new ScriptureToken(ScriptureTokenType.AMEN, yytext(), yyline, yychar);
          }
        case 47: break;
        case 2: 
          { return new ScriptureToken(ScriptureTokenType.IDENTIFIER, yytext(), yyline, yychar);
          }
        case 48: break;
        case 5: 
          { return new ScriptureToken(ScriptureTokenType.DIVISION_OPERATOR, yytext(), yyline, yychar);
          }
        case 49: break;
        case 24: 
          { return new ScriptureToken(ScriptureTokenType.TRUE, yytext(), yyline, yychar);
          }
        case 50: break;
        case 20: 
          { return new ScriptureToken(ScriptureTokenType.XOR, yytext(), yyline, yychar);
          }
        case 51: break;
        case 35: 
          { return new ScriptureToken(ScriptureTokenType.BOOLEAN, yytext(), yyline, yychar);
          }
        case 52: break;
        case 14: 
          { return new ScriptureToken(ScriptureTokenType.IF, yytext(), yyline, yychar);
          }
        case 53: break;
        case 8: 
          { return new ScriptureToken(ScriptureTokenType.SUBTRACTION_OPERATOR, null, yyline, yychar);
          }
        case 54: break;
        case 23: 
          { return new ScriptureToken(ScriptureTokenType.ELSE, yytext(), yyline, yychar);
          }
        case 55: break;
        case 13: 
          { stringLiteralBuffer.append(yytext()); yybegin(YYINITIAL); return new ScriptureToken(ScriptureTokenType.STRING_LITERAL, stringLiteralBuffer.toString(), yyline, yychar);
          }
        case 56: break;
        case 40: 
          { return new ScriptureToken(ScriptureTokenType.COMMANDMENT, yytext(), yyline, yychar);
          }
        case 57: break;
        case 36: 
          { return new ScriptureToken(ScriptureTokenType.ARTIFACT, yytext(), yyline, yychar);
          }
        case 58: break;
        case 4: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER_LITERAL, yytext(), yyline, yychar);
          }
        case 59: break;
        case 39: 
          { return new ScriptureToken(ScriptureTokenType.SCRIPTURE, yytext(), yyline, yychar);
          }
        case 60: break;
        case 15: 
          { return new ScriptureToken(ScriptureTokenType.OF, yytext(), yyline, yychar);
          }
        case 61: break;
        case 30: 
          { return new ScriptureToken(ScriptureTokenType.STRING, yytext(), yyline, yychar);
          }
        case 62: break;
        case 17: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP_LITERAL, yytext(), yyline, yychar);
          }
        case 63: break;
        case 16: 
          { return new ScriptureToken(ScriptureTokenType.OR, yytext(), yyline, yychar);
          }
        case 64: break;
        case 28: 
          { return new ScriptureToken(ScriptureTokenType.ALIAS, yytext(), yyline, yychar);
          }
        case 65: break;
        case 41: 
          { return new ScriptureToken(ScriptureTokenType.CREATE, yytext(), yyline, yychar);
          }
        case 66: break;
        case 12: 
          { stringLiteralBuffer.append('\\');
          }
        case 67: break;
        case 19: 
          { return new ScriptureToken(ScriptureTokenType.NOT, yytext(), yyline, yychar);
          }
        case 68: break;
        case 37: 
          { return new ScriptureToken(ScriptureTokenType.CREATION, yytext(), yyline, yychar);
          }
        case 69: break;
        case 7: 
          { return new ScriptureToken(ScriptureTokenType.ADDITION_OPERATOR, null, yyline, yychar);
          }
        case 70: break;
        case 34: 
          { return new ScriptureToken(ScriptureTokenType.GENESIS, yytext(), yyline, yychar);
          }
        case 71: break;
        case 33: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER, yytext(), yyline, yychar);
          }
        case 72: break;
        case 25: 
          { return new ScriptureToken(ScriptureTokenType.REAL, yytext(), yyline, yychar);
          }
        case 73: break;
        case 11: 
          { stringLiteralBuffer.append(yytext());
          }
        case 74: break;
        case 38: 
          { return new ScriptureToken(ScriptureTokenType.PROPHECY, yytext(), yyline, yychar);
          }
        case 75: break;
        case 31: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP, yytext(), yyline, yychar);
          }
        case 76: break;
        case 18: 
          { return new ScriptureToken(ScriptureTokenType.AND, yytext(), yyline, yychar);
          }
        case 77: break;
        case 6: 
          { stringLiteralBuffer.setLength(0); stringLiteralBuffer.append(yytext()); yybegin(STRING);
          }
        case 78: break;
        case 10: 
          { return new ScriptureToken(ScriptureTokenType.COMPARATIVE_OPERATOR, yytext(), yyline, yychar);
          }
        case 79: break;
        case 1: 
          { throw new ScriptureLexerException(yytext(), yyline, yychar);
          }
        case 80: break;
        case 32: 
          { return new ScriptureToken(ScriptureTokenType.PREACH, yytext(), yyline, yychar);
          }
        case 81: break;
        case 29: 
          { return new ScriptureToken(ScriptureTokenType.ORDER, yytext(), yyline, yychar);
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new ScriptureToken(ScriptureTokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
