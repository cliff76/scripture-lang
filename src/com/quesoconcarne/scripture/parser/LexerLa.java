/* The following code was generated by JFlex 1.4.3 on 9/14/09 3:24 PM */

package com.quesoconcarne.scripture.parser;

/**
 * This is the lexer class for Latin.
 */

final class LexerLa implements ScriptureLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int REGEXP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\37\1\56\1\34\1\0\1\56\1\55\16\37\4\0\1\56\1\52"+
    "\1\40\1\54\1\36\1\51\2\0\1\33\1\35\1\50\1\46\1\0"+
    "\1\47\1\31\1\51\1\26\11\30\1\42\1\0\1\53\1\43\1\53"+
    "\1\0\1\32\6\27\24\36\1\44\1\41\1\45\1\0\1\36\1\0"+
    "\1\2\1\24\1\13\1\20\1\7\1\1\1\22\1\23\1\14\2\36"+
    "\1\3\1\11\1\12\1\17\1\15\1\36\1\10\1\4\1\16\1\5"+
    "\1\6\1\36\1\21\2\36\4\0\41\37\2\0\4\36\4\0\1\36"+
    "\2\0\1\37\7\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u013f\36\31\0\162\36\4\0\14\36\16\0\5\36\11\0\1\36"+
    "\21\0\130\37\5\0\23\37\12\0\1\36\13\0\1\36\1\0\3\36"+
    "\1\0\1\36\1\0\24\36\1\0\54\36\1\0\46\36\1\0\5\36"+
    "\4\0\202\36\1\0\4\37\3\0\105\36\1\0\46\36\2\0\2\36"+
    "\6\0\20\36\41\0\46\36\2\0\1\36\7\0\47\36\11\0\21\37"+
    "\1\0\27\37\1\0\3\37\1\0\1\37\1\0\2\37\1\0\1\37"+
    "\13\0\33\36\5\0\3\36\15\0\4\37\14\0\6\37\13\0\32\36"+
    "\5\0\13\36\16\37\7\0\12\25\4\0\2\36\1\37\143\36\1\0"+
    "\1\36\10\37\1\0\6\37\2\36\2\37\1\0\4\37\2\36\12\25"+
    "\3\36\2\0\1\36\17\0\1\37\1\36\1\37\36\36\33\37\2\0"+
    "\3\36\60\0\46\36\13\37\1\36\u014f\0\3\37\66\36\2\0\1\37"+
    "\1\36\20\37\2\0\1\36\4\37\3\0\12\36\2\37\2\0\12\25"+
    "\21\0\3\37\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\1\36\3\0\4\36\2\0\1\37\1\36\7\37\2\0\2\37"+
    "\2\0\3\37\11\0\1\37\4\0\2\36\1\0\3\36\2\37\2\0"+
    "\12\25\4\36\15\0\3\37\1\0\6\36\4\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\2\36\1\0\2\36\2\0\1\37"+
    "\1\0\5\37\4\0\2\37\2\0\3\37\13\0\4\36\1\0\1\36"+
    "\7\0\12\25\2\37\3\36\14\0\3\37\1\0\11\36\1\0\3\36"+
    "\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\37"+
    "\1\36\10\37\1\0\3\37\1\0\3\37\2\0\1\36\17\0\2\36"+
    "\2\37\2\0\12\25\1\0\1\36\17\0\3\37\1\0\10\36\2\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0"+
    "\1\37\1\36\6\37\3\0\2\37\2\0\3\37\10\0\2\37\4\0"+
    "\2\36\1\0\3\36\4\0\12\25\1\0\1\36\20\0\1\37\1\36"+
    "\1\0\6\36\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36"+
    "\1\0\2\36\3\0\2\36\3\0\3\36\3\0\10\36\1\0\3\36"+
    "\4\0\5\37\3\0\3\37\1\0\4\37\11\0\1\37\17\0\11\25"+
    "\11\0\1\36\7\0\3\37\1\0\10\36\1\0\3\36\1\0\27\36"+
    "\1\0\12\36\1\0\5\36\4\0\7\37\1\0\3\37\1\0\4\37"+
    "\7\0\2\37\11\0\2\36\4\0\12\25\22\0\2\37\1\0\10\36"+
    "\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36\2\0\1\37"+
    "\1\36\7\37\1\0\3\37\1\0\4\37\7\0\2\37\7\0\1\36"+
    "\1\0\2\36\4\0\12\25\22\0\2\37\1\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\20\36\4\0\6\37\2\0\3\37\1\0\4\37"+
    "\11\0\1\37\10\0\2\36\4\0\12\25\22\0\2\37\1\0\22\36"+
    "\3\0\30\36\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\37"+
    "\4\0\6\37\1\0\1\37\1\0\10\37\22\0\2\37\15\0\60\36"+
    "\1\37\2\36\7\37\4\0\10\36\10\37\1\0\12\25\47\0\2\36"+
    "\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36\6\0\4\36"+
    "\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36\2\0\2\36"+
    "\1\0\4\36\1\37\2\36\6\37\1\0\2\37\1\36\2\0\5\36"+
    "\1\0\1\36\1\0\6\37\2\0\12\25\2\0\2\36\42\0\1\36"+
    "\27\0\2\37\6\0\12\25\13\0\1\37\1\0\1\37\1\0\1\37"+
    "\4\0\2\37\10\36\1\0\42\36\6\0\24\37\1\0\2\37\4\36"+
    "\4\0\10\37\1\0\44\37\11\0\1\37\71\0\42\36\1\0\5\36"+
    "\1\0\2\36\1\0\7\37\3\0\4\37\6\0\12\25\6\0\6\36"+
    "\4\37\106\0\46\36\12\0\51\36\7\0\132\36\5\0\104\36\5\0"+
    "\122\36\6\0\7\36\1\0\77\36\1\0\1\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\47\36\1\0\1\36\1\0"+
    "\4\36\2\0\37\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\7\36\1\0\7\36\1\0\27\36\1\0"+
    "\37\36\1\0\1\36\1\0\4\36\2\0\7\36\1\0\47\36\1\0"+
    "\23\36\16\0\11\25\56\0\125\36\14\0\u026c\36\2\0\10\36\12\0"+
    "\32\36\5\0\113\36\3\0\3\36\17\0\15\36\1\0\4\36\3\37"+
    "\13\0\22\36\3\37\13\0\22\36\2\37\14\0\15\36\1\0\3\36"+
    "\1\0\2\37\14\0\64\36\40\37\3\0\1\36\3\0\2\36\1\37"+
    "\2\0\12\25\41\0\3\37\2\0\12\25\6\0\130\36\10\0\51\36"+
    "\1\37\126\0\35\36\3\0\14\37\4\0\14\37\12\0\12\25\36\36"+
    "\2\0\5\36\u038b\0\154\36\224\0\234\36\4\0\132\36\6\0\26\36"+
    "\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0\7\36"+
    "\1\0\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0\6\36"+
    "\4\0\15\36\5\0\3\36\1\0\7\36\17\0\4\37\32\0\5\37"+
    "\20\0\2\36\23\0\1\36\13\0\4\37\6\0\6\37\1\0\1\36"+
    "\15\0\1\36\40\0\22\36\36\0\15\37\4\0\1\37\3\0\6\37"+
    "\27\0\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36"+
    "\6\0\1\36\1\0\1\36\1\0\1\36\1\0\4\36\1\0\3\36"+
    "\1\0\7\36\3\0\3\36\5\0\5\36\26\0\44\36\u0e81\0\3\36"+
    "\31\0\11\36\6\37\1\0\5\36\2\0\5\36\4\0\126\36\2\0"+
    "\2\37\2\0\3\36\1\0\137\36\5\0\50\36\4\0\136\36\21\0"+
    "\30\36\70\0\20\36\u0200\0\u19b6\36\112\0\u51a6\36\132\0\u048d\36\u0773\0"+
    "\u2ba4\36\u215c\0\u012e\36\2\0\73\36\225\0\7\36\14\0\5\36\5\0"+
    "\1\36\1\37\12\36\1\0\15\36\1\0\5\36\1\0\1\36\1\0"+
    "\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36\2\0"+
    "\66\36\50\0\15\36\3\0\20\37\20\0\4\37\17\0\2\36\30\0"+
    "\3\36\31\0\1\36\6\0\5\36\1\0\207\36\2\0\1\37\4\0"+
    "\1\36\13\0\12\25\7\0\32\36\4\0\1\36\1\0\32\36\12\0"+
    "\132\36\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36\3\0"+
    "\2\36\3\0\2\36\22\0\3\37\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\20\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\1\1\1\22\1\23\1\24"+
    "\6\2\1\25\2\2\1\26\1\27\14\2\3\0\1\21"+
    "\1\0\1\6\1\0\1\6\1\22\2\2\1\30\5\2"+
    "\1\21\1\2\1\31\2\2\1\32\12\2\1\33\1\3"+
    "\2\0\1\6\1\0\1\6\3\2\1\34\13\2\1\35"+
    "\1\2\1\36\1\2\1\37\4\0\1\6\1\2\1\40"+
    "\2\2\1\41\1\42\12\2\1\0\1\43\2\2\1\44"+
    "\1\45\1\46\1\47\1\50\5\2\1\0\6\2\1\51"+
    "\1\0\2\2\1\52\3\2\1\53\1\2\1\54\1\55"+
    "\1\2\1\56\1\53\1\57\1\60\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\215\0\u040a"+
    "\0\215\0\u0439\0\215\0\215\0\215\0\u0468\0\215\0\215"+
    "\0\215\0\215\0\215\0\215\0\u0468\0\u0468\0\u0497\0\u04c6"+
    "\0\215\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u011a\0\u011a\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\215\0\u098c\0\215\0\u09bb"+
    "\0\u09ea\0\215\0\u0a19\0\u0a48\0\u011a\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u011a\0\u0b62\0\u011a\0\u0b91\0\u0bc0\0\u011a"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u08ff\0\u092e\0\u0dc5\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u011a\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u011a\0\u1142\0\u011a\0\u1171\0\u011a\0\u11a0\0\u11cf\0\u0e23"+
    "\0\u11fe\0\u098c\0\u122d\0\u011a\0\u125c\0\u128b\0\u011a\0\u011a"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403"+
    "\0\u1432\0\u1461\0\u1490\0\u011a\0\u14bf\0\u14ee\0\u011a\0\u011a"+
    "\0\u011a\0\u011a\0\u011a\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u011a"+
    "\0\u1751\0\u1780\0\u17af\0\u011a\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u011a\0\u011a\0\u18c9\0\u011a\0\u18f8\0\u011a\0\u011a"+
    "\0\u11a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\26\1\7"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\7\1\4"+
    "\1\34\1\4\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\2\32\34\50\1\4"+
    "\3\50\1\51\1\52\13\50\1\4\1\50\57\4\60\0"+
    "\1\7\1\53\26\7\5\0\2\7\20\0\2\7\1\54"+
    "\1\7\1\55\2\7\1\56\1\57\17\7\5\0\2\7"+
    "\20\0\30\7\5\0\2\7\20\0\12\7\1\60\1\61"+
    "\14\7\5\0\2\7\20\0\6\7\1\62\21\7\5\0"+
    "\2\7\20\0\3\7\1\63\11\7\1\64\2\7\1\65"+
    "\7\7\5\0\2\7\20\0\6\7\1\66\21\7\5\0"+
    "\2\7\20\0\13\7\1\67\2\7\1\70\11\7\5\0"+
    "\2\7\20\0\1\7\1\71\5\7\1\72\20\7\5\0"+
    "\2\7\20\0\11\7\1\73\16\7\5\0\2\7\20\0"+
    "\7\7\1\74\20\7\5\0\2\7\20\0\7\7\1\75"+
    "\20\7\5\0\2\7\20\0\6\7\1\76\21\7\5\0"+
    "\2\7\20\0\1\7\1\77\26\7\5\0\2\7\20\0"+
    "\6\7\1\100\21\7\5\0\2\7\20\0\16\7\1\101"+
    "\11\7\5\0\2\7\44\0\2\25\1\0\1\25\1\102"+
    "\46\0\1\103\3\0\2\25\1\0\1\25\1\102\35\0"+
    "\1\104\102\0\1\32\20\0\2\32\43\0\1\105\13\0"+
    "\34\106\1\107\13\106\1\110\4\106\1\111\1\106\34\50"+
    "\1\0\3\50\2\0\13\50\1\0\1\50\40\0\1\112"+
    "\17\0\2\7\1\113\25\7\5\0\2\7\20\0\13\7"+
    "\1\114\14\7\5\0\2\7\20\0\15\7\1\115\12\7"+
    "\5\0\2\7\20\0\15\7\1\116\12\7\5\0\2\7"+
    "\20\0\6\7\1\117\21\7\5\0\2\7\20\0\7\7"+
    "\1\120\20\7\5\0\2\7\20\0\11\7\1\121\16\7"+
    "\5\0\2\7\20\0\7\7\1\122\20\7\5\0\2\7"+
    "\20\0\15\7\1\123\12\7\5\0\2\7\20\0\3\7"+
    "\1\124\7\7\1\125\5\7\1\126\6\7\5\0\2\7"+
    "\20\0\22\7\1\127\5\7\5\0\2\7\20\0\11\7"+
    "\1\130\16\7\5\0\2\7\20\0\15\7\1\131\12\7"+
    "\5\0\2\7\20\0\6\7\1\132\21\7\5\0\2\7"+
    "\20\0\15\7\1\133\12\7\5\0\2\7\20\0\6\7"+
    "\1\134\7\7\1\135\11\7\5\0\2\7\20\0\17\7"+
    "\1\136\10\7\5\0\2\7\20\0\12\7\1\137\15\7"+
    "\5\0\2\7\20\0\4\7\1\140\23\7\5\0\2\7"+
    "\20\0\11\7\1\141\16\7\5\0\2\7\20\0\16\7"+
    "\1\142\11\7\5\0\2\7\44\0\2\143\1\0\1\143"+
    "\27\0\2\144\4\0\1\144\3\0\1\144\4\0\1\144"+
    "\3\0\1\144\1\0\3\144\35\0\1\145\47\0\34\106"+
    "\1\107\20\106\1\111\1\106\34\146\1\147\13\146\1\150"+
    "\4\146\1\151\1\146\34\0\1\107\23\0\3\7\1\152"+
    "\24\7\5\0\2\7\20\0\1\7\1\153\26\7\5\0"+
    "\2\7\20\0\6\7\1\154\21\7\5\0\2\7\20\0"+
    "\11\7\1\155\16\7\5\0\2\7\20\0\13\7\1\156"+
    "\14\7\5\0\2\7\20\0\16\7\1\157\11\7\5\0"+
    "\2\7\20\0\4\7\1\160\23\7\5\0\2\7\20\0"+
    "\1\7\1\161\26\7\5\0\2\7\20\0\6\7\1\162"+
    "\21\7\5\0\2\7\20\0\13\7\1\163\14\7\5\0"+
    "\2\7\20\0\6\7\1\164\21\7\5\0\2\7\20\0"+
    "\1\7\1\165\26\7\5\0\2\7\20\0\6\7\1\166"+
    "\21\7\5\0\2\7\20\0\17\7\1\167\10\7\5\0"+
    "\2\7\20\0\1\170\27\7\5\0\2\7\20\0\16\7"+
    "\1\171\11\7\5\0\2\7\20\0\1\7\1\172\26\7"+
    "\5\0\2\7\20\0\15\7\1\173\12\7\5\0\2\7"+
    "\20\0\6\7\1\174\21\7\5\0\2\7\20\0\2\7"+
    "\1\175\25\7\5\0\2\7\52\0\1\176\23\0\34\146"+
    "\1\147\13\146\1\177\4\146\1\151\1\146\50\200\1\201"+
    "\6\200\34\106\1\107\13\106\1\150\3\106\1\202\1\111"+
    "\1\106\34\200\1\147\13\200\1\201\6\200\1\0\4\7"+
    "\1\203\23\7\5\0\2\7\20\0\3\7\1\204\24\7"+
    "\5\0\2\7\20\0\1\205\27\7\5\0\2\7\20\0"+
    "\14\7\1\206\13\7\5\0\2\7\20\0\11\7\1\207"+
    "\16\7\5\0\2\7\20\0\3\7\1\210\24\7\5\0"+
    "\2\7\20\0\7\7\1\211\20\7\5\0\2\7\20\0"+
    "\20\7\1\212\7\7\5\0\2\7\20\0\2\7\1\213"+
    "\25\7\5\0\2\7\20\0\11\7\1\214\16\7\5\0"+
    "\2\7\20\0\7\7\1\215\20\7\5\0\2\7\20\0"+
    "\21\7\1\216\6\7\5\0\2\7\20\0\13\7\1\217"+
    "\14\7\5\0\2\7\20\0\6\7\1\220\21\7\5\0"+
    "\2\7\20\0\2\7\1\221\25\7\5\0\2\7\20\0"+
    "\3\7\1\222\24\7\5\0\2\7\17\0\34\176\1\0"+
    "\1\223\17\176\1\0\1\176\34\146\1\147\13\146\1\177"+
    "\3\146\1\202\1\151\1\146\50\200\1\201\3\200\1\107"+
    "\2\200\1\0\3\7\1\224\24\7\5\0\2\7\20\0"+
    "\1\7\1\225\26\7\5\0\2\7\20\0\15\7\1\226"+
    "\12\7\5\0\2\7\20\0\6\7\1\227\21\7\5\0"+
    "\2\7\20\0\14\7\1\230\13\7\5\0\2\7\20\0"+
    "\16\7\1\231\11\7\5\0\2\7\20\0\1\7\1\232"+
    "\26\7\5\0\2\7\20\0\6\7\1\233\21\7\5\0"+
    "\2\7\20\0\7\7\1\234\20\7\5\0\2\7\20\0"+
    "\12\7\1\235\15\7\5\0\2\7\20\0\3\7\1\236"+
    "\24\7\5\0\2\7\20\0\16\7\1\237\11\7\5\0"+
    "\2\7\20\0\13\7\1\240\14\7\5\0\2\7\17\0"+
    "\10\176\1\241\23\176\1\0\1\223\17\176\1\0\1\176"+
    "\1\0\12\7\1\242\15\7\5\0\2\7\20\0\4\7"+
    "\1\243\23\7\5\0\2\7\20\0\4\7\1\244\23\7"+
    "\5\0\2\7\20\0\1\7\1\245\26\7\5\0\2\7"+
    "\20\0\3\7\1\246\24\7\5\0\2\7\20\0\21\7"+
    "\1\247\6\7\5\0\2\7\20\0\3\7\1\250\24\7"+
    "\5\0\2\7\17\0\7\176\1\251\24\176\1\0\1\223"+
    "\17\176\1\0\1\176\1\0\15\7\1\252\12\7\5\0"+
    "\2\7\20\0\7\7\1\253\20\7\5\0\2\7\20\0"+
    "\10\7\1\254\17\7\5\0\2\7\20\0\7\7\1\255"+
    "\20\7\5\0\2\7\20\0\1\7\1\256\26\7\5\0"+
    "\2\7\20\0\4\7\1\257\23\7\5\0\2\7\17\0"+
    "\32\176\1\260\1\176\1\0\1\223\17\176\1\0\1\176"+
    "\1\0\4\7\1\261\23\7\5\0\2\7\20\0\1\7"+
    "\1\262\26\7\5\0\2\7\20\0\6\7\1\263\21\7"+
    "\5\0\2\7\20\0\7\7\1\264\20\7\5\0\2\7"+
    "\20\0\3\7\1\265\24\7\5\0\2\7\17\0\11\176"+
    "\1\266\2\176\1\266\17\176\1\0\1\223\17\176\1\0"+
    "\1\176\1\0\10\7\1\267\17\7\5\0\2\7\20\0"+
    "\6\7\1\270\21\7\5\0\2\7\17\0\11\176\1\271"+
    "\2\176\1\271\17\176\1\0\1\223\17\176\1\0\1\176";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6439];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\22\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\1\6\11\4\1\1\11\30\1\3\0\1\11\1\0"+
    "\1\11\1\0\1\1\1\11\32\1\2\0\1\1\1\0"+
    "\25\1\4\0\21\1\1\0\15\1\1\0\7\1\1\0"+
    "\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer stringLiteralBuffer = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerLa(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerLa(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScriptureToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { /* ignore */
          }
        case 49: break;
        case 10: 
          { return new ScriptureToken(ScriptureTokenType.EQUAL, null, yyline, yychar);
          }
        case 50: break;
        case 27: 
          { return new ScriptureToken(ScriptureTokenType.REAL_LITERAL, yytext(), yyline, yychar);
          }
        case 51: break;
        case 9: 
          { return new ScriptureToken(ScriptureTokenType.DELIMITER, null, yyline, yychar);
          }
        case 52: break;
        case 12: 
          { return new ScriptureToken(ScriptureTokenType.RIGHT_BRACKET, null, yyline, yychar);
          }
        case 53: break;
        case 36: 
          { return new ScriptureToken(ScriptureTokenType.PRAY, yytext(), yyline, yychar);
          }
        case 54: break;
        case 35: 
          { return new ScriptureToken(ScriptureTokenType.FALSE, yytext(), yyline, yychar);
          }
        case 55: break;
        case 15: 
          { return new ScriptureToken(ScriptureTokenType.MULTIPLICATION_OPERATOR, null, yyline, yychar);
          }
        case 56: break;
        case 28: 
          { return new ScriptureToken(ScriptureTokenType.AMEN, yytext(), yyline, yychar);
          }
        case 57: break;
        case 2: 
          { return new ScriptureToken(ScriptureTokenType.IDENTIFIER, yytext(), yyline, yychar);
          }
        case 58: break;
        case 16: 
          { return new ScriptureToken(ScriptureTokenType.DIVISION_OPERATOR, yytext(), yyline, yychar);
          }
        case 59: break;
        case 34: 
          { return new ScriptureToken(ScriptureTokenType.TRUE, yytext(), yyline, yychar);
          }
        case 60: break;
        case 30: 
          { return new ScriptureToken(ScriptureTokenType.XOR, yytext(), yyline, yychar);
          }
        case 61: break;
        case 5: 
          { return new ScriptureToken(ScriptureTokenType.LEFT_PARENTHESIS, null, yyline, yychar);
          }
        case 62: break;
        case 31: 
          { return new ScriptureToken(ScriptureTokenType.BOOLEAN, yytext(), yyline, yychar);
          }
        case 63: break;
        case 21: 
          { return new ScriptureToken(ScriptureTokenType.IF, yytext(), yyline, yychar);
          }
        case 64: break;
        case 14: 
          { return new ScriptureToken(ScriptureTokenType.SUBTRACTION_OPERATOR, null, yyline, yychar);
          }
        case 65: break;
        case 7: 
          { return new ScriptureToken(ScriptureTokenType.RIGHT_PARENTHESIS, null, yyline, yychar);
          }
        case 66: break;
        case 33: 
          { return new ScriptureToken(ScriptureTokenType.ELSE, yytext(), yyline, yychar);
          }
        case 67: break;
        case 19: 
          { stringLiteralBuffer.append(yytext()); yybegin(YYINITIAL); return new ScriptureToken(ScriptureTokenType.STRING_LITERAL, stringLiteralBuffer.toString(), yyline, yychar);
          }
        case 68: break;
        case 46: 
          { return new ScriptureToken(ScriptureTokenType.COMMANDMENT, yytext(), yyline, yychar);
          }
        case 69: break;
        case 47: 
          { return new ScriptureToken(ScriptureTokenType.ARTIFACT, yytext(), yyline, yychar);
          }
        case 70: break;
        case 4: 
          { return new ScriptureToken(ScriptureTokenType.DOT, null, yyline, yychar);
          }
        case 71: break;
        case 3: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER_LITERAL, yytext(), yyline, yychar);
          }
        case 72: break;
        case 44: 
          { return new ScriptureToken(ScriptureTokenType.SCRIPTURE, yytext(), yyline, yychar);
          }
        case 73: break;
        case 23: 
          { return new ScriptureToken(ScriptureTokenType.OF, yytext(), yyline, yychar);
          }
        case 74: break;
        case 39: 
          { return new ScriptureToken(ScriptureTokenType.STRING, yytext(), yyline, yychar);
          }
        case 75: break;
        case 43: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP_LITERAL, yytext(), yyline, yychar);
          }
        case 76: break;
        case 24: 
          { return new ScriptureToken(ScriptureTokenType.OR, yytext(), yyline, yychar);
          }
        case 77: break;
        case 32: 
          { return new ScriptureToken(ScriptureTokenType.ALIAS, yytext(), yyline, yychar);
          }
        case 78: break;
        case 40: 
          { return new ScriptureToken(ScriptureTokenType.CREATE, yytext(), yyline, yychar);
          }
        case 79: break;
        case 20: 
          { stringLiteralBuffer.append('\\');
          }
        case 80: break;
        case 26: 
          { return new ScriptureToken(ScriptureTokenType.NOT, yytext(), yyline, yychar);
          }
        case 81: break;
        case 38: 
          { return new ScriptureToken(ScriptureTokenType.CREATION, yytext(), yyline, yychar);
          }
        case 82: break;
        case 13: 
          { return new ScriptureToken(ScriptureTokenType.ADDITION_OPERATOR, null, yyline, yychar);
          }
        case 83: break;
        case 41: 
          { return new ScriptureToken(ScriptureTokenType.GENESIS, yytext(), yyline, yychar);
          }
        case 84: break;
        case 42: 
          { return new ScriptureToken(ScriptureTokenType.INTEGER, yytext(), yyline, yychar);
          }
        case 85: break;
        case 25: 
          { return new ScriptureToken(ScriptureTokenType.REAL, yytext(), yyline, yychar);
          }
        case 86: break;
        case 18: 
          { stringLiteralBuffer.append(yytext());
          }
        case 87: break;
        case 48: 
          { return new ScriptureToken(ScriptureTokenType.PROPHECY, yytext(), yyline, yychar);
          }
        case 88: break;
        case 37: 
          { return new ScriptureToken(ScriptureTokenType.REGEXP, yytext(), yyline, yychar);
          }
        case 89: break;
        case 22: 
          { return new ScriptureToken(ScriptureTokenType.AND, yytext(), yyline, yychar);
          }
        case 90: break;
        case 8: 
          { stringLiteralBuffer.setLength(0); stringLiteralBuffer.append(yytext()); yybegin(STRING);
          }
        case 91: break;
        case 17: 
          { return new ScriptureToken(ScriptureTokenType.COMPARATIVE_OPERATOR, yytext(), yyline, yychar);
          }
        case 92: break;
        case 45: 
          { return new ScriptureToken(ScriptureTokenType.PREACH, yytext(), yyline, yychar);
          }
        case 93: break;
        case 1: 
          { throw new ScriptureLexerException(yytext(), yyline, yychar);
          }
        case 94: break;
        case 29: 
          { return new ScriptureToken(ScriptureTokenType.ORDER, yytext(), yyline, yychar);
          }
        case 95: break;
        case 11: 
          { return new ScriptureToken(ScriptureTokenType.LEFT_BRACKET, null, yyline, yychar);
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new ScriptureToken(ScriptureTokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
